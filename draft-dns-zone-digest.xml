<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
There has to be one entity for each item to be referenced. 
An alternate method (rfc include) is described in the references. --><!ENTITY RFC5966 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5966.xml">
<!ENTITY I-D.ietf-tcpm-fastopen SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tcpm-fastopen">
<!ENTITY I-D.draft-ietf-dnsop-edns-tcp-keepalive SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dnsop-edns-tcp-keepalive-00.xml">
<!ENTITY RFC1034 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC1995 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1995.xml">
<!ENTITY RFC2065 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2065.xml">
<!ENTITY RFC2119 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2181 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2535 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2535.xml">
<!ENTITY RFC2629 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC2845 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2845.xml">
<!ENTITY RFC2931 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2931.xml">
<!ENTITY RFC3658 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3658.xml">
<!ENTITY RFC4033 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC4509 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4509.xml">
<!ENTITY RFC4880 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4880.xml">
<!ENTITY RFC5751 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5751.xml">
<!ENTITY RFC5933 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5933.xml">
<!ENTITY RFC5936 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5936.xml">
<!ENTITY RFC6234 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml">
<!ENTITY RFC7696 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7696.xml">
<!ENTITY RFC7706 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7706.xml">
<!ENTITY RFC7858 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC8126 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC8174 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8499 PUBLIC "" "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8499.xml">
<!ENTITY RRNAME "ZONEMD">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-ietf-dnsop-dns-zone-digest-05" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
  ipr values: full3667, noModification3667, noDerivatives3667
  you can add the attributes updates="NNNN" and obsoletes="NNNN" 
  they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
    full title is longer than 39 characters -->

    <title abbrev="DNS Zone Digest">Message Digest for DNS Zones</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Duane Wessels" initials="D." surname="Wessels">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>dwessels@verisign.com</email>
        <uri>http://verisign.com</uri>
      </address>
    </author>

    <author fullname="Piet Barber" initials="P." surname="Barber">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>pbarber@verisign.com</email>
        <uri>http://verisign.com</uri>
      </address>
    </author>

    <author fullname="Matt Weinberg" initials="M." surname="Weinberg">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>mweinberg@verisign.com</email>
        <uri>http://verisign.com</uri>
      </address>
    </author>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <author fullname="Wes Hardaker" initials="W." surname="Hardaker">
      <organization>USC/ISI</organization>
      <address>
        <postal>
          <street>P.O. Box 382</street>
          <city>Davis</city>
          <region>CA</region>
          <code>95617</code>
        </postal>
        <email>ietf@hardakers.net</email>
      </address>
    </author>

    <date day="9" month="March" year="2020"/>

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>DNS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>Checksum</keyword>
    <keyword>Hash</keyword>
    <keyword>Zone Transfer</keyword>

    <abstract>
      <t>
        This document describes a protocol and new DNS Resource Record
        that can be used to provide a cryptographic message digest over DNS zone data.
        The &RRNAME; Resource Record conveys the digest data in
        the zone itself.
        When a zone publisher includes an &RRNAME; record, recipients
        can verify the zone contents for accuracy and completeness.
        This provides assurance that received zone data matches
        published data, regardless of how the zone data has been
        transmitted and received.
      </t>
      <t>
        &RRNAME; is not designed to replace DNSSEC.
        Whereas DNSSEC protects individual RRSets (DNS data with
        fine granularity), &RRNAME; protects a zone's data
        as a whole, whether consumed by authoritative name
        servers, recursive name servers, or any other applications.
      </t>
      <t>
        As specified at this time, &RRNAME; is not designed for use
        in large, dynamic zones due to the time and resources
        required for digest calculation.
        The &RRNAME; record described in this document
        is designed so that new digest schemes may be developed in the future to support large, dynamic
        zones.
      </t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction">
      <t>
        In the DNS, a zone is the collection of authoritative resource
        records (RRs) sharing a common origin (<xref target="RFC8499"/>).
        Zones are often stored as files on disk in the so-called
        master file format <xref target="RFC1034"/>.
        Zones are generally distributed among name servers using 
        the AXFR <xref target="RFC5936"/>, and IXFR <xref target="RFC1995"/>
        protocols.
        Zone files can also be distributed outside of the DNS, with
        such protocols as FTP, HTTP, rsync, and even via email.
        Currently there is no standard way to verify the authenticity
        of a stand-alone zone.
      </t>
      <t>
        This document introduces a new RR type that serves as a
        cryptographic message digest of the data in a zone.
        It allows a receiver of the zone to verify the zone's
        authenticity, especially when used in combination with DNSSEC.
        This technique makes the
        digest a part of the zone itself, allowing
        verification the zone as a whole, no matter how it is
        transmitted.
        Furthermore, the digest is based on the wire format of zone data.
        Thus, it is independent of presentation format, such as changes in
        whitespace, capitalization, and comments.
      </t>
      <t>
        DNSSEC provides three strong security guarantees relevant
        to this protocol:
        <list style="numbers">
        <t>whether or not to expect DNSSEC records in the zone,</t>
        <t>whether or not to expect a &RRNAME; record in a signed zone, and</t>
        <t>whether or not the &RRNAME; record has been altered since it was signed.</t>
        </list>
      </t>
      <t>
        This specification is OPTIONAL to implement by both publishers
        and consumers of zone data.
      </t>
      <section title="Motivation">
        <t>
          The motivation for this protocol enhancement is the desire for
          the ability to verify the authenticity of a stand-alone zone,
          regardless of how it is transmitted.  A consumer of zone data
          should be able to verify that the data is as-published by the
          zone operator.
        </t>
        <t>
          One approach to preventing data tampering and corruption is
          to secure the distribution channel.  The DNS has a number
          of features that can already be used for channel security.
          Perhaps the most widely used is DNS transaction signatures
          (TSIG <xref target="RFC2845"/>).  TSIG uses shared secret keys
          and a message digest to protect individual query and response
          messages. It is generally used to authenticate and validate
          UPDATE <xref target="RFC2136"/>, AXFR <xref target="RFC5936"/>,
          and IXFR <xref target="RFC1995"/> messages.
        </t>
        <t>
          DNS Request and Transaction Signatures (SIG(0) <xref
          target="RFC2931"/>) is another protocol extension designed to
          authenticate individual DNS transactions.  Whereas SIG records
          were originally designed to cover specific RR types, SIG(0)
          is used to sign an entire DNS message.  Unlike TSIG, SIG(0)
          uses public key cryptography rather than shared secrets.
        </t>
        <t>
          The Transport Layer Security protocol suite is also designed
          to provide channel security. 
          One can easily imagine
          the distribution of zones over HTTPS-enabled web servers,
          as well as DNS-over-HTTPS <xref target="dns-over-https"/>, and perhaps
          even a future version of DNS-over-TLS (<xref target="RFC7858"/>).
        </t>
        <t>
          Unfortunately, the protections provided by these channel
          security techniques are (in practice) ephemeral and are not retained after the
          data transfer is complete.  They can ensure that the client
          receives the data from the expected server, and that the
          data sent by the server is not modified during transmission.
          However, they do not guarantee that the server transmits the
          data as originally published, and do not provide any methods
          to verify data that is read after transmission is complete.
          For example, a name server loading saved zone data upon restart
          cannot guarantee that the on-disk data has not been modified.
          For these reasons, it is preferable to secure the data itself.
        </t>

        <t>
          Why not simply rely on DNSSEC, which provides certain data security guarantees?
          Certainly for zones that are signed, a recipient could
          validate all of the signed RRSets.  Additionally, denial-of-existence
          records can prove that RRSets have not been added or
          removed.  However, not all RRSets
          in a zone are signed.  The design of DNSSEC stipulates that delegations (non-apex NS records) are not signed,
          and neither are any glue records.  &RRNAME; protects the integrity of delegation,
          glue, and other records that are not otherwise covered by DNSSEC. Furthermore, zones
          that employ NSEC3 with opt-out are susceptible to the
          removal or addition of names between the signed nodes.
          Whereas DNSSEC is primarily designed to protect consumers
          of DNS response messages, this protocol is designed to
          protect consumers of zones.
        </t>
        <t>
          There are existing tools and protocols that provide data
          security, such as OpenPGP <xref target="RFC4880"/> and S/MIME
          <xref target="RFC5751"/>.  In fact, the internic.net site
          publishes PGP signatures along side the root zone and other
          files available there.  However, this is a detached signature
          with no strong association to the corresponding zone file other
          than its timestamp.  Non-detached signatures are, of course,
          possible, but these necessarily change the format of the file
          being distributed.  That is, a zone signed with OpenPGP or
          S/MIME no longer looks like a DNS zone and could not directly
          be loaded into a name server.  Once loaded the signature data
          is lost, so it does not survive further propagation.
        </t>
        <t>
          It seems the desire for data security in DNS zones was envisioned
          as far back as 1997.
          <xref target="RFC2065"/> is an obsoleted specification
          of the first generation DNSSEC Security Extensions.  It
          describes a zone transfer signature, aka AXFR SIG, which
          is similar to the technique proposed by this document.
          That is, it proposes ordering all (signed) RRSets in a zone,
          hashing their contents, and then signing the zone hash.
          The AXFR SIG is described only for use during zone
          transfers.  It did not postulate the need to validate
          zone data distributed outside of the DNS.  Furthermore,
          its successor, <xref target="RFC2535"/>, omits the AXFR
          SIG, while at the same time introducing an IXFR SIG.
        </t>
      </section>

      <section title="Design Overview">
        <t>
          This document introduces a new Resource Record type designed
          to convey a message digest of the content of a zone.
          The digest is calculated at the time of zone publication.
          Ideally the zone is signed with DNSSEC to guarantee that any
          modifications of the digest can be detected.  The procedures for
          digest calculation and DNSSEC signing are similar.  Both require
          data to be processed in a well-defined order and format.  In
          some cases it may be possible to perform DNSSEC signing and
          digest calculation in parallel.
        </t>
        <t>
          The zone digest is designed to be used on zones that are
          relatively stable and have infrequent updates.  As currently
          specified, the digest is re-calculated over the entire zone
          content each time.  This specification does not provide
          an efficient mechanism for incremental updates of zone
          data.  It is, however, extensible so that
          future schemes to support incremental
          zone digest algorithms (e.g. using Merkle trees) can be accommodated.
        </t>
        <!-- XXX Joe Abley: remove following paragraph -->
        <t>
          It is expected that verification of a zone digest would be
          implemented in name server software.  That is, a name server
          can verify the zone data it was given and refuse to serve a
          zone which fails verification.  For signed zones, the name
          server needs a trust anchor to perform DNSSEC validation.
          For signed non-root zones, the name server may need to send
          queries to validate a chain-of-trust.  Digest verification
          could also be performed externally.
        </t>
      </section>

      <section title="Use Cases">
        <!-- MSJ: 1.3 - general  - add something like "Specifically,
        ZONEMD covers the integrity of <your text here> records that
        are not otherwise covered by DNSSEC". -->
        <section title="Root Zone">
          <t>
            The root zone <xref target="InterNIC"/>
            is one of the most widely distributed DNS zone on the Internet,
            served by more than 1000 separate instances <xref target="RootServers"/>
            at the time of this writing.  Additionally, many organizations
            configure their own name servers to serve the root zone locally.
            Reasons for doing so include privacy and reduced access time.
            <xref target="RFC7706"/> describes one, but not the only, way
            to do this.  As the root zone spreads beyond its traditional
            deployment boundaries, the need for verification of the
            completeness of the zone contents becomes increasingly
            important.
          </t>
        </section>
        <section title="Providers, Secondaries, and Anycast">
          <t>
            Since its very early days, the developers of the DNS
            recognized the importance of secondary name servers and
            service diversity.  However, they may not have anticipated
            the complexity of modern DNS service provisioning which
            can include  multiple third-party providers and hundreds
            of anycast instances.  Instead of a simple primary-to-secondary
            zone distribution system, today it is possible to have
            multiple levels, multiple parties, and multiple protocols
            involved in the distribution of zone data.  This complexity
            introduces new places for problems to arise.  The zone digest
            protects the integrity of data that flows through such systems.
          </t>
        </section>
        <section title="Response Policy Zones">
          <t>
            DNS Response Policy Zones is "a method of expressing
            DNS response policy information inside specially
            constructed DNS zones..." <xref target="RPZ"/>.  A
            number of companies provide RPZ feeds, which can be
            consumed by name server and firewall products.  Since
            these are zones, AXFR is often, but not necessarily
            used for transmission.  While RPZ zones can certainly
            be signed with DNSSEC, the data is not queried directly,
            and would not be subject to DNSSEC validation.
          </t>
        </section>
        <section title="Centralized Zone Data Service">
          <t>
            ICANN operates the Centralized Zone Data Service <xref
            target="CZDS"/>, which is a repository of top-level
            domain zone files.  Users request access to the system,
            and to individual zones, and are then able to download
            zone data for certain uses.  Adding a zone digest to
            these would provide CZDS users with assurances that the
            data has not been modified.  Note that &RRNAME; could
            be added to CZDS zone data independently of the zone
            served by production name servers.
          </t>
        </section>
        <section title="General Purpose Comparison Check">
          <t>
            Since the zone digest calculation does not depend on presentation
            format, it could be used to compare multiple copies of
            a zone received from different sources, or copies
            generated by different processes.
          </t>
        </section>
      </section>

      <section title="Requirements Language">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
          capitals, as shown here.
        </t>
      </section>
    </section>

    <section title="The &RRNAME; Resource Record" anchor="rrtype">
      <t>
        This section describes the &RRNAME; Resource Record, including its fields, wire format, and presentation format.
        The Type value for the &RRNAME; RR is 63.
        The &RRNAME; RR is class independent.
        The RDATA of the resource record consists of four fields: Serial, Scheme, Hash Algorithm, and Digest.
      </t>

      <t>
       A zone MAY contain multiple &RRNAME; RRs to support algorithm
       agility <xref target="RFC7696"/> and rollovers.
       Each &RRNAME; RR must specify a unique Scheme and Hash Algorithm tuple.
       It is recommended that a zone include only one &RRNAME; RR, unless
       the zone publisher is in the process of transitioning to a new
       Scheme or Hash Algorithm.
      </t>

      <section title="Non-apex &RRNAME; Records">
        <t>
          This specification utilizes &RRNAME; RRs located at the
          zone apex.  Non-apex &RRNAME; RRs are not forbidden, but
          have no meaning in this specification.
          Non-apex &RRNAME; RRs MUST NOT be used for verification.
        </t>
        <t>
          During digest calculation,
          non-apex &RRNAME; RRs are treated like any other RRs.
          They are digested as-is and the RR is not replaced
          by a placeholder RR.
        </t>
        <t>
          Unless explicitly stated otherwise, "&RRNAME;" always refers
          to apex records throughout this document.
        </t>
      </section>

      <section title="&RRNAME; RDATA Wire Format">
        <!-- XXX Joe Abley: specify short names for the fields -->
        <t>The &RRNAME; RDATA wire format is encoded as follows:</t>
        <figure><artwork align="left"><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             Serial                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Scheme     |Hash Algorithm |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
|                             Digest                            |
/                                                               /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

        <section title="The Serial Field">
          <t>
            The Serial field is a 32-bit unsigned integer in network
            order. It is equal to the serial number from the zone's
            SOA record (<xref target="RFC1035"/> section 3.3.13) for
            which the zone digest was generated.
          </t>
          <t>
            The zone's serial number is included here in order to
            make DNS response messages of type &RRNAME; meaningful.
            Without the serial number, a stand-alone &RRNAME; digest
            has no association to any particular instance of a zone.
          </t>
        </section>

        <section title="The Scheme Field">
          <t>
            The Scheme field is an 8-bit unsigned integer that identifies
            the methods by which data is collated and presented
            as input to the hashing function.
          </t>
          <t>
            At the time of this writing, SIMPLE, with value 1, is the only
            standardized Scheme defined for &RRNAME; records.  The Scheme registry
            is further described in <xref target="iana"/>.
          </t>
          <t>
            Scheme values 240-254 are allocated for Private Use as
            described in <xref target="RFC8126"/>.
          </t>
        </section>

        <section title="The Hash Algorithm Field">
          <t>
            The Hash Algorithm field is an 8-bit unsigned integer
            that identifies the cryptographic hash algorithm
            used to construct the digest.
          </t>
          <t>
            At the time of this writing, SHA384, with value 1, is the only
            standardized
            Hash Algorithm defined for &RRNAME; records.  The Hash Algorithm registry
            is further described in <xref target="iana"/>.
          </t>
          <t>
            Hash Algorithm values 240-254 are allocated for Private Use as
            described in <xref target="RFC8126"/>.
          </t>
        </section>

        <section title="The Digest Field">
          <t>
            The Digest field is a variable-length sequence of octets
            containing the output of the hash algorithm.  The Digest field must not be empty.
            <xref target="calculating"/>
            describes how to calculate the digest for a zone.
            <xref target="verifying"/> describes how to use the digest to
            verify the contents of a zone.
          </t>
        </section>
      </section>

      <section title="&RRNAME; Presentation Format">
        <t>
          The presentation format of the RDATA portion is as follows:
        </t>
        <t>
          The Serial field is represented as an unsigned decimal integer.
        </t>
        <t>
          The Scheme field is represented as an unsigned decimal integer.
        </t>
        <t>
          The Hash Algorithm field is represented as an unsigned decimal
          integer.
        </t>
        <t>
          The Digest is represented as a sequence of case-insensitive
          hexadecimal digits.  Whitespace is allowed within the hexadecimal
          text.
        </t>
      </section>

      <section title="&RRNAME; Example">
        <t>
          The following example shows a &RRNAME; RR.
        </t>
        <figure><artwork>
example.com. 86400 IN &RRNAME; 2018031500 1 1 (
    FEBE3D4CE2EC2FFA4BA99D46CD69D6D29711E55217057BEE
    7EB1A7B641A47BA7FED2DD5B97AE499FAFA4F22C6BD647DE )
        </artwork></figure>
      </section>

    </section>

    <section title="Calculating the Digest" anchor="calculating">
      <section title="Add &RRNAME; Placeholder" anchor="placeholder">
        <t>
          In preparation for calculating the zone digest, any existing &RRNAME; records
          (and covering RRSIGs)
          at the zone apex
          are first deleted.
        </t>
        <t>
          Prior to calculation of the digest, and prior to signing with
          DNSSEC, one or more placeholder &RRNAME; records are added to the
          zone apex.  This serves two purposes: (1) it allows the digest to cover
          the Serial, Scheme, and Hash Algorithm fields, and (2) ensures that 
          appropriate denial-of-existence (NSEC, NSEC3) records are created
          if the zone is signed with DNSSEC.
          When multiple &RRNAME; RRs are published in the zone, e.g.,
          during an algorithm rollover, each must specify a unique Scheme
          and Hash Algorithm tuple.
        </t>
        <t>
          It is recommended that the TTL of the &RRNAME; record match the TTL of the SOA.
        </t>
        <t>
          In the placeholder record, the Serial field is
          set to the current SOA Serial.
          The Scheme field is set to the value for the chosen collation scheme.
          The Hash Algorithm field is set
          to the value for the chosen hash algorithm.
          The Digest
          field is set to all zeroes and of length appropriate
          for the chosen hash algorithm.
        </t>
      </section>
      <section title="Optionally Sign the Zone">
        <t>
          Following addition of placeholder records, the zone may be signed with DNSSEC.
          Note that when the digest calculation is complete, and the &RRNAME; record is updated,
          the signature(s) for the &RRNAME; RRSet MUST be recalculated and
          updated as well.
          Therefore, the signer is not required to calculate a signature over the placeholder record at
          this step in the process, but it is harmless to do so.
        </t>
      </section>

      <section title="Canonical Format and Ordering" anchor="canonical-ordering">
        <t>
          Calculation of a zone digest REQUIRES RRs
          to be processed in a consistent format and ordering.  Correct ordering
          depends on (1) ordering of owner names, (2)
          ordering of RRSets with the same owner name, and (3) ordering of
          RRs within an RRSet.
        </t>
        <t>
          This specification adopts DNSSEC's canonical ordering for names
          (Section 6.1 of <xref target="RFC4034"/>),
          and canonical ordering for RRs within an RRSet
          (Section 6.3 of <xref target="RFC4034"/>).
          It also adopts DNSSEC's canonical RR form
          (Section 6.2 of <xref target="RFC4034"/>).
          However, since DNSSEC does not define a canonical ordering for RRSets
          having the same owner name, that ordering is defined here.
        </t>
        <t>
          This specification adopts DNSSEC's canonical on-the-wire RR format
          (without name compression) as specified in <xref target="RFC4034"/>:
        </t>
        <figure><artwork>
RR(i) = owner | type | class | TTL | RDATA length | RDATA

where "|" denotes concatenation.
        </artwork></figure>
        <!-- t>
          The record collating sequence is scheme specific.
        </t -->
        <section title="Order of RRSets Having the Same Owner Name">
          <t>
            For the purposes of calculating the zone digest, RRSets having
            the same owner name MUST be numerically ordered, in ascending order, by their numeric RR TYPE.
          </t>
        </section>
      </section>

      <!-- section title="Handling Duplicate RRs">
        <t>
          As stated in Section 5 of <xref target="RFC2181"/>
          and Section 6.3 of <xref target="RFC4034"/>, it
          is meaningless for a zone to have multiple RRs with
          equal owner name, class, type, and RDATA.  In the
          interest of consistency and interoperability,
          only one instance of duplicate RRs with equal owner,
          class, type and RDATA is included in a zone digest.
        </t>
      </section -->

      <section title="Inclusion/Exclusion Rules" anchor="inclusion-exclusion">
        <t>
          When iterating over records in the zone, the following inclusion/exclusion rules apply:
          <list style="symbols">
          <t>All records in the zone, including glue records, MUST be included.</t>
          <t>Occluded data (<xref target="RFC5936"/> Section 3.5) MUST be included.</t>
          <t>Only one instance of duplicate RRs with equal owner, class, type and RDATA SHALL be included (<xref target="RFC4034"/> Section 6.3).</t>
          <t>The placeholder &RRNAME; RR(s) MUST be included.</t>
          <t>If the zone is signed, DNSSEC RRs MUST be included, except:</t>
          <t>The RRSIG covering &RRNAME; MUST NOT be included
            because the RRSIG will be updated after all digests have been calculated.</t>
          </list>
        </t>
      </section>

      <section title="Scheme-Specific Processing" anchor="collate-iterate">
        <t>
          At this time, only the SIMPLE collation scheme is defined.
          Additional schemes may be defined in future updates to this document.
        </t>

        <section title="The SIMPLE Scheme" anchor="scheme-simple">
          <t>
            For the SIMPLE scheme, the digest is calculated over the zone as
            a whole.  This means that a change to a single RR in the zone
            requires iterating over all RRs in the zone to recalculate
            the digest.  SIMPLE is a good choice for zones that are small
            and/or stable, but probably not good for zones that are
            large and/or dynamic.
          </t>

          <t>
            A zone digest using the SIMPLE scheme is calculated by concatenating the canonical form
            of all RRs in the zone, in the order described
            in <xref target="canonical-ordering"/>, subject to the inclusion/exclusion rules described
            in <xref target="inclusion-exclusion"/>, and then applying the SHA-384 algorithm:
          </t>
          <figure><artwork>
digest = hash( RR(1) | RR(2) | RR(3) | ... )

where "|" denotes concatenation.
          </artwork></figure>

        </section>
      </section>

      <section title="Update &RRNAME; RR">
        <t>
          Once a zone digest has been calculated, the published &RRNAME;
          record is finalised by inserting the digest into the placeholder
          &RRNAME;.
          Repeat for each digest if multiple
          digests are to be published.
        </t>
        <t>
          If the zone is signed with DNSSEC, the RRSIG record(s) covering the &RRNAME;
          RRSet MUST then be added or updated.  Because the &RRNAME; placeholder was added prior to signing,
          the zone will already have the appropriate denial-of-existence (NSEC, NSEC3) records.
        </t>
        <t>
          Some DNSSEC implementations (especially "online signing") might
          be designed such that the SOA serial number is updated whenever
          a new signature is made.  To preserve the calculated digest,
          generation of an &RRNAME; signature must not also result in
          a change to the SOA serial number.  The &RRNAME; RR and the
          matching SOA MUST be published at the same time.
        </t>
      </section>

    </section>

    <section title="Verifying Zone Digest" anchor="verifying">
      <t>
        The recipient of a zone that has a &RRNAME; RR can verify the zone
        by calculating the digest as follows.
          If multiple &RRNAME; RRs are present in the zone, e.g.,
          during an algorithm rollover, a match using any one of the recipient's
          supported Schemes and Hash Algorithms is sufficient to verify the zone.
      </t>
      <t>
        <list style="numbers">
          <t anchor="verify-check-dnssec">
            The verifier MUST first determine
            whether or not to expect DNSSEC records in the zone.
            This can be done by examining locally configured trust
            anchors, or querying for (and validating) DS RRs in the
            parent zone.  For zones that are provably insecure,
            or if DNSSEC validation can not be performed,
            digest validation continues at step <xref target="verify-check-digest-count" format="counter"/> below.
          </t>
          <t anchor="verify-check-existence">
            For zones that are provably secure, the existence of
            the apex &RRNAME; record MUST be verified.  If the &RRNAME;
            record provably does not exist, digest verification
            cannot be done.  If the &RRNAME; record does provably
            exist, but is not found in the zone, digest verification
            MUST NOT be considered successful.
          </t>
          <t anchor="verify-dnssec-validate">
            For zones that are provably secure, the SOA and
            &RRNAME; RRSets MUST have valid signatures, chaining
            up to a trust anchor.  If DNSSEC validation of the SOA
            or &RRNAME; records fails, digest verification MUST NOT
            be considered successful.
          </t>
          <t anchor="verify-check-digest-count">
            If the &RRNAME; RRSet contains more than one RR with the same Scheme and Hash Algorithm, digest verification
            MUST NOT be considered successful.
          </t>
          <t anchor="verify-check-serials">
            The SOA Serial field MUST exactly match the &RRNAME;
            Serial field.  If the fields to not match, digest
            verification MUST NOT be considered successful.
          </t>
          <t>
            The &RRNAME; Hash Algorithm field MUST be checked.  If the
            verifier does not support the given Hash Algorithm, it
            SHOULD report that the zone digest could not be verified
            due to an unsupported algorithm.
          </t>
          <t>
            The received Digest value is copied to
            a temporary location.  Repeat for each &RRNAME; RR present.
          </t>
          <t anchor="verify-zeroize-digest">
            The &RRNAME; RR's Digest field MUST be set to all zeroes.
            Repeat for each RR present in the apex &RRNAME; RRSet, even for unsupported Scheme and Hash Algorithm values.
          </t>
          <t>
            The zone digest is computed over the zone data as
            described in <xref target="collate-iterate"/>.
          </t>
          <t>
            The calculated digest is compared to the received digest
            stored in the temporary location.
            If the two digest values match, verification is considered
            successful.  Otherwise, verification MUST NOT be
            considered successful.
          </t>
          <t>
            The &RRNAME; RR's RDATA is reset to the received
            Digest stored in the temporary location.
            Thus, any downstream clients can similarly verify the zone.
          </t>
        </list>
      </t>
      <t>
          Note that when multiple &RRNAME; RRs are present in the zone, 
          the Digest field of each MUST be zeroed in step <xref
          target="verify-zeroize-digest" format="counter"/> above, even for
          unsupported Scheme and Hash Algorithm values.
      </t>
    </section>

    <!-- section title="Scope of Experimentation">
      <t>
        This memo is published as an Experimental RFC.  The purpose
        of the experimental period is to provide the community time
        to analyze and evaluate the methods defined in this
        document, particularly with regard to the wide variety of
        DNS zones in use on the Internet.
      </t>
      <t>
        Additionally, the &RRNAME; record defined in this document
        includes a Parameter field in the form of an 8-bit integer.  The authors have a particular
        future use in mind for this field, namely to support efficient
        digests in large, dynamic zones.  We intend to conduct
        future experiments using Merkle trees of varying depth.  The
        choice of tree depth can be encoded in this reserved
        field.  We expect values for tree depth to range from 0 to
        10, requiring at most four bits of this field.  This leaves
        another four bits available for other future uses, if
        absolutely necessary.
      </t>
      <t>
        The duration of the experiment is expected to be no less
        than two years from the publication of this document.  If
        the experiment is successful, it is expected that the
        findings of the experiment will result in an updated document
        for Standards Track approval.
      </t>

    </section -->

    <section title="IANA Considerations" anchor="iana">
      <section title="&RRNAME; RRtype">
        <t>
          This document defines a new DNS RR type, &RRNAME;, whose
          value 63 has been allocated by IANA from the "Resource
          Record (RR) TYPEs" subregistry of the "Domain Name System
          (DNS) Parameters" registry:
        </t>
        <t>Type: &RRNAME;</t>
        <t>Value: 63</t>
        <t>Meaning: Message Digest Over Zone Data</t>
        <t>Reference: This document</t>
      </section>

      <section title="&RRNAME; Scheme">
        <t>
          This document asks IANA to create a new
          "&RRNAME; Scheme" registry
          with initial contents as follows:
        </t>
        <texttable anchor="scheme-table" title="&RRNAME; Scheme Registry">
        <ttcol align="left">Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">Mnemonic</ttcol>
        <ttcol align="left">Status</ttcol>
        <ttcol align="left">Reference</ttcol>

        <c>0</c>
        <c>Reserved</c>
        <c>RESERVED</c>
        <c>N/A</c>
        <c>N/A</c>

        <c>1</c>
        <c>Simple &RRNAME; collation</c>
        <c>SIMPLE</c>
        <c>Mandatory</c>
        <c>This document</c>

        <c>240-254</c>
        <c>Private Use</c>
        <c>N/A</c>
        <c>N/A</c>
        <c><xref target="RFC8126"/></c>

        </texttable>
        <t>
          The IANA policy for assigning new values to the &RRNAME;
          Scheme registry shall be Specification Required, as described
          in <xref target="RFC8126"/>.
        </t>
      </section>

      <section title="&RRNAME; Hash Algorithm" anchor="hash-alg-registry">
        <t>
          This document asks IANA to create a new
          "&RRNAME; Hash Algorithm" registry
          with initial contents as follows:
        </t>
        <texttable anchor="digest-type-table" title="&RRNAME; Hash Algorithm Registry">
        <ttcol align="left">Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">Mnemonic</ttcol>
        <ttcol align="left">Status</ttcol>
        <ttcol align="left">Reference</ttcol>

        <c>0</c>
        <c>Reserved</c>
        <c>RESERVED</c>
        <c>N/A</c>
        <c>N/A</c>

        <c>1</c>
        <c>The SHA-384 hash algorithm</c>
        <c>SHA384</c>
        <c>Mandatory</c>
        <c><xref target="RFC6234"/></c>

        <c>240-254</c>
        <c>Private Use</c>
        <c>N/A</c>
        <c>N/A</c>
        <c><xref target="RFC8126"/></c>

        </texttable>
        <t>
          The IANA policy for assigning new values to the &RRNAME;
          Hash Algorithm registry shall be Specification Required,
          as described in <xref target="RFC8126"/>.
        </t>
      </section>

    </section>

    <section title="Security Considerations" anchor="security">
      <section title="Attacks Against the Zone Digest">
        <t>
          The zone digest allows the receiver to verify that the zone
          contents haven't been modified since the zone was
          generated/published.  Verification is strongest when the
          zone is also signed with DNSSEC.
          An attacker, whose goal is to modify zone content before
          it is used by the victim, may consider a number of different
          approaches.
        </t>
        <t>
          The attacker might perform a downgrade attack to an unsigned
          zone.  This is why <xref target="verifying"/> talks about
          determining whether or not to expect DNSSEC
          signatures for the zone in step <xref target="verify-check-dnssec" format="counter"/>.
        </t>
        <t>
          The attacker might perform a downgrade attack by removing
          one or more &RRNAME; records.  Such a removal is detectable only with DNSSEC
          validation and is why <xref target="verifying"/>
          talks about checking denial-of-existence
          proofs in step <xref target="verify-check-existence" format="counter"/>
          and signature validation in step <xref target="verify-dnssec-validate" format="counter"/>.
        </t>
        <t>
          The attacker might alter the Scheme, Hash Algorithm, or Digest fields
          of the &RRNAME; record.  Such modifications are detectable
          only with DNSSEC validation.
        </t>
      </section>
      <section title="Attacks Utilizing &RRNAME; Queries">
        <t>
          Nothing in this specification prevents clients from making,
          and servers from responding to, &RRNAME; queries.
          Servers SHOULD NOT calculate zone digests dynamically (for
          each query) as this can be used as a CPU resource exhaustion
          attack.
        </t>
        <t>
          One might
          consider how well &RRNAME; responses could be used in
          a distributed denial-of-service amplification attack.
          The &RRNAME; RR is moderately sized, much like the DS RR.
          A single &RRNAME; RR contributes approximately 40 to 65
          octets to a DNS response, for currently defined digest
          types.  Certainly other RR types result in larger
          amplification effects (i.e., DNSKEY).
        </t>
      </section>
      <section title="Resilience and Fragility">
        <t>
          &RRNAME; can be used to detect incomplete or corrupted
          zone data prior to its use, thereby increasing resilience,
          but also introducing some fragility.
          Publishers and consumers of zones containing &RRNAME;
          records should be aware of these tradeoffs.
          While the intention is to secure the zone data,
          misconfigurations or implementation bugs are generally
          indistinguishable from intentional tampering, and could lead
          to service failures when verification is performed automatically.
        </t>
        <t>
          Zone publishers may want to deploy &RRNAME; gradually, perhaps
          by utilizing one of the private use hash algorithms listed
          in <xref target="hash-alg-registry"/>.  Similarly, recipients
          may want to initially configure verification failures only as
          a warning, and later as an error after gaining experience and
          confidence with the feature.
        </t>
      </section>
    </section>

    <section title="Performance Considerations" anchor="performance">
      <t>
        This section is provided to make zone publishers aware of the
        performance requirements and implications of including &RRNAME;
        RRs in a zone.
      </t>
      <section title="SIMPLE SHA384">
        <t>
          As mentioned previously, the SIMPLE scheme may not be
          appropriate for use in zones that are either large or
          highly dynamic.
          Zone publishers should carefully consider the use of &RRNAME;
          in such zones, since it might cause consumers of zone data
          (e.g., secondary name servers) to expend resources on digest
          calculation.
          Furthermore, for such use cases, it is recommended that &RRNAME;
          only be used when digest calculation time is significantly
          less than propagation times and update intervals.
        </t>
        <t>
          The authors' implementation (<xref
          target="authors-implementation"/>) includes an option to record
          and report CPU usage of its operation.
          The software was used to generate digests for more than 800
          TLD zones available from <xref target="CZDS"/>.
          The table below summarizes the the results for the SIMPLE scheme and SHA384 hash algorithm
          grouped by zone size.
          The Rate column is the mean amount of time per RR to calculate the digest,
          running on commodity hardware at the time of this writing.
        </t>
        <texttable>
          <ttcol align="right">Zone Size (RRs)</ttcol>
          <ttcol align="right">Rate (msec/RR)</ttcol>
          <c>10 - 99</c>  <c>0.00683</c>
          <c>100 - 999</c>  <c>0.00551</c>
          <c>1000 - 9999</c>  <c>0.00505</c>
          <c>10000 - 99999</c>  <c>0.00602</c>
          <c>100000 - 999999</c>  <c>0.00845</c>
          <c>1000000 - 9999999</c>  <c>0.0108</c>
          <c>10000000 - 99999999</c>  <c>0.0148</c>
        </texttable>
        <t>
          For example, based on the above table, it takes approximately
          0.13 seconds to calculate a SIMPLE SHA384 digest for a zone with
          22,000 RRs, and about 2.5 seconds for a zone with 300,000 RRs.
        </t>
        <t>
          These benchmarks attempt to emulate a worst-case scenario and
          take into account the time required to canonicalize the zone
          for processing.
          Each of the 800+ zones were measured three times, and then
          averaged, with a different random sorting of the input data
          prior to each measurement.
        </t>
      </section>
    </section>

    <section title="Privacy Considerations" anchor="privacy">
      <t>This specification has no impact on user privacy.</t>
    </section>

    <section title="Acknowledgments" anchor="acknowledgments">
      <t>
        The authors wish to thank David Blacka, Scott Hollenbeck, and Rick Wilhelm
        for providing feedback on early drafts of this document.  Additionally, they
	thank
	Joe Abley,
        Mark Andrews,
        Ralph Dolmans,
        Richard Gibson,
	Olafur Gudmundsson,
        Bob Harold,
	Paul Hoffman,
	Evan Hunt,
	Shumon Huque,
        Tatuya Jinmei,
        Mike St. Johns,
	Burt Kaliski,
        Shane Kerr,
	Matt Larson,
	John Levine,
	Ed Lewis,
	Matt Pounsett,
	Mukund Sivaraman,
	Petr Spacek,
	Ondrej Sury,
        Willem Toorop,
	Florian Weimer,
	Tim Wicinksi,
        Wouter Wijngarrds,
	Paul Wouters,
        and other members of
        the dnsop working group
        for their input.
      </t>
    </section>

    <section anchor="Implementation" title="Implementation Status">
      <section title="Authors' Implementation" anchor="authors-implementation">
        <t>
          The authors have an open source implementation in
          C, using the ldns library <xref target="ldns-zone-digest"/>.  This implementation is able to
          perform the following functions:
          <list style="symbols">
          <t>Read an input zone and output a zone with the &RRNAME; placeholder.</t>
          <t>Compute zone digest over signed zone and update the &RRNAME; record.</t>
          <t>Re-compute DNSSEC signature over the &RRNAME; record.</t>
          <t>Verify the zone digest from an input zone.</t>
          </list>
          This implementation does not:
          <list style="symbols">
          <t>Perform DNSSEC validation of the &RRNAME; record during verification.</t>
          </list>
        </t>
      </section>
      <section title="Shane Kerr's Implementation">
        <t> Shane Kerr wrote an implementation of this specification during the IETF 102 hackathon
          <xref target="ZoneDigestHackathon"/>.  This implementation is in Python and is able to
          perform the following functions:
          <list style="symbols">
          <t>Read an input zone and output a zone with &RRNAME; record.</t>
          <t>Verify the zone digest from an input zone.</t>
          <t>Output the &RRNAME; record in its defined presentation format.</t>
          </list>
          This implementation does not:
          <list style="symbols">
          <t>Re-compute DNSSEC signature over the &RRNAME; record.</t>
          <t>Perform DNSSEC validation of the &RRNAME; record.</t>
          </list>
        </t>
      </section>
    </section>

    <section anchor="Changes" title="Change Log">
      <t>RFC Editor: Please remove this section.</t>
      <t>This section lists substantial changes to the document as it is being worked on.</t>
      <t>From -00 to -01:
      <list style="symbols">
        <t>Removed requirement to sort by RR CLASS.</t>
        <t>Added Kumari and Hardaker as coauthors.</t>
        <t>Added Change Log section.</t>
        <t>Minor clarifications and grammatical edits.</t>
      </list></t>
      <t>From -01 to -02:
      <list style="symbols">
        <t>Emphasize desire for data security over channel security.</t>
        <t>Expanded motivation into its own subsection.</t>
        <t>Removed discussion topic whether or not to include serial in &RRNAME;.</t>
        <t>Clarified that a zone's NS records always sort before the SOA record.</t>
        <t>Clarified that all records in the zone must are digested, except as specified in
        the exclusion rules.</t>
        <t>Added for discussion out-of-zone and occluded records.</t>
        <t>Clarified that update of &RRNAME; signature must not cause a serial number change.</t>
        <t>Added persons to acknowledgments.</t>
      </list></t>
      <t>From -02 to -03:
      <list style="symbols">
        <t>Added recommendation to set &RRNAME; TTL to SOA TTL.</t>
        <t>Clarified that digest input uses uncompressed names.</t>
        <t>Updated Implementations section.</t>
        <t>Changed intended status from Standards Track to Experimental and added Scope of Experiment section.</t>
        <t>Updated Motivation, Introduction, and Design Overview sections in response to working group discussion.</t>
        <t>Gave &RRNAME; digest types their own status, separate from DS digest types.  Request IANA to create a registry.</t>
        <t>Added Reserved field for future work supporting dynamic updates.</t>
        <t>Be more rigorous about having just ONE &RRNAME; record in the zone.</t>
        <t>Expanded use cases.</t>
      </list></t>
      <t>From -03 to -04:
      <list style="symbols">
       <t>Added an appendix with example zones and digests.</t>
       <t>Clarified that only apex &RRNAME; RRs shall be processed.</t>
      </list></t>
      <t>From -04 to -05:
      <list style="symbols">
       <t>Made SHA384 the only supported ZONEMD digest type.</t>
       <t>Disassociated ZONEMD digest types from DS digest types.</t>
       <t>Updates to Introduction based on list feedback.</t>
       <t>Changed "zone file" to "zone" everywhere.</t>
       <t>Restored text about why ZONEMD has a Serial field.</t>
       <t>Clarified ordering of RRSets having same owner to be numerically ascending.</t>
       <t>Clarified that all duplicate RRs (not just SOA) must be suppressed in digest calculation.</t>
       <t>Clarified that the Reserved field must be set to zero and checked for zero in verification.</t>
       <t>Clarified that occluded data must be included.</t>
       <t>Clarified procedure for verification, using temporary location for received digest.</t>
       <t>Explained why Reserved field is 8-bits.</t>
       <t>IANA Considerations section now more specific.</t>
       <t>Added complex zone to examples.</t>
       <t></t>
      </list></t>
      <t>From -05 to -06:
      <list style="symbols">
       <t>RR type code 63 was assigned to &RRNAME; by IANA.</t>
      </list></t>
      <t>From -06 to -07:
      <list style="symbols">
       <t>Fixed mistakes in &RRNAME; examples.</t>
       <t>Added private use Digest Type values 240-254.</t>
       <t>Clarified that Digest field must not be empty.</t>
      </list></t>
      <t>From -07 to draft-ietf-dnsop-dns-zone-digest-00:
      <list style="symbols">
        <t>Adopted by dnsop.</t>
        <t>Clarified further that non-apex &RRNAME; RRs have no meaning.</t>
        <t>Changed "provably [un]signed" to "provably [in]secure".</t>
        <t>Allow multiple &RRNAME; RRs to support algorithm agility/rollovers.</t>
        <t>Describe verification when there are multiple &RRNAME; RRs.</t>
      </list></t>
      <t>From -00 to -01:
      <list style="symbols">
        <t>Simplified requirements around verifying multiple digests.  Any one match is sufficient.</t>
        <t>Updated implementation notes.</t>
        <t>Both implementations produce expected results on examples given in this document.</t>
      </list></t>
      <t>From -01 to -02:
      <list style="symbols">
        <t>Changed the name of the Reserved field to Parameter.</t>
        <t>Changed the name of Digest Type 1 from SHA384 to SHA384-STABLE.</t>
        <t>The meaning of the Parameter field now depends on Digest Type.</t>
        <t>No longer require Parameter field to be zero in verification.</t>
        <t>Updated a rule from earlier versions that said multiple &RRNAME; RRs were not allowed.</t>
      </list></t>
      <t>From -02 to -03:
      <list style="symbols">
        <t>Changed the name of Digest Type 1 from SHA384-STABLE to SHA384-SIMPLE.</t>
        <t>Changed document status from Experimental to Standards Track.</t>
        <t>Removed Scope of Experimentation section.</t>
      </list></t>
      <t>From -03 to -04:
      <list style="symbols">
        <t>Addressing WGLC feedback.</t>
        <t>Changed from "Digest Type + Paramter" to "Scheme + Hash Algorithm".  This should make it more obvious how &RRNAME; can be expanded in the future with new schemes and hash algorithms, while sacrificing some of the flexibility that the Parameter was intended to provide.</t>
        <t>Note: old RDATA fields: Serial, Digest Type, Parameter, Digest.</t>
        <t>Note: new RDATA fields: Serial, Scheme, Hash Algorithm, Digest.</t>
        <t>Add new IANA requirement for a Scheme registry.</t>
        <t>Rearranged some sections and separated scheme-specific aspects from general aspects of digest calculation.</t>
        <t>When discussing multiple &RRNAME; RRs, allow for Scheme, as well as Hash Algorithm, transition.</t>
        <t>Added Performance Considerations section with some benchmarks.</t>
        <t>Further clarifications about non-apex &RRNAME; RRs.</t>
        <t>Clarified inclusion rule for duplicate RRs.</t>
        <t>Removed or lowercased some inappropriately used RFC 2119 key words.</t>
        <t>Clarified that all &RRNAME; RRs, even for unsupported hash algorithms, must be zeroized during digest calculation.</t>
        <t>Added Resilience and Fragility to security considerations.</t>
        <t>Updated examples since changes in this version result in different hash values.</t>
      </list></t>
      <t>From -04 to -05:
      <list style="symbols">
        <t>Clarifications about non-apex and multiple &RRNAME; RRs.</t>
        <t>Clarifications about benchmark results.</t>
        <t>Don't compute &RRNAME; on-the-fly.</t>
        <t>Specifciation Required for updates to ZONEMD protocol registries.</t>
        <t>Other rewording based on WGLC feedback.</t>
      </list></t>
    </section>

  </middle>
  <back>

    <references title="Normative References">
    &RFC2119;
    &RFC1034;
    &RFC1035;
    <!-- &RFC2181; -->
    &RFC4034;
    <!-- &RFC3658; -->
    <!-- &RFC4509; -->
    <!-- &RFC5933; -->
    &RFC6234;
    &RFC8174;

    </references>

    <references title="Informative References">
    &RFC1995;
    &RFC2065;
    &RFC2136;
    &RFC2535;
    &RFC2845;
    &RFC2931;
    &RFC5751;
    &RFC4880;
    &RFC5936;
    &RFC7706;
    &RFC8499;
    &RFC7858;
    &RFC7696;
    &RFC8126;

     <reference anchor="InterNIC" target="ftp://ftp.internic.net/domain/">
        <front>
          <title>InterNIC FTP site</title>
          <author>
            <organization>ICANN</organization>
          </author>
          <date year="2018" month="May" day="31"/>
        </front>
     </reference>

     <reference anchor="RootServers" target="https://www.root-servers.org/">
        <front>
          <title>Root Server Technical Operations</title>
          <author>
            <organization>Root Server Operators</organization>
          </author>
          <date year="2018" month="July" day="2"/>
        </front>
     </reference>

     <reference anchor="dns-over-https" target="https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-12">
        <front>
          <title>DNS Queries over HTTPS (DoH)</title>
          <author initials="P." surname="Hoffman" fullname="Paul Hoffman">
            <organization>ICANN</organization>
          </author>
          <author initials="P." surname="McManus" fullname="Patrick McManus">
            <organization>Mozilla</organization>
          </author>
          <date year="2018" month="June" day="27"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-doh-dns-over-https-12" />
     </reference>

     <reference anchor="ldns-zone-digest" target="https://github.com/verisign/ldns-zone-digest">
        <front>
          <title>Implementation of Message Digests for DNS Zones using the ldns library</title>
          <author>
            <organization>Verisign</organization>
          </author>
          <date year="2018" month="July" day="20"/>
        </front>
     </reference>

     <reference anchor="ZoneDigestHackathon" target="https://github.com/shane-kerr/ZoneDigestHackathon">
        <front>
          <title>Prototype implementation of &RRNAME; for the IETF 102 hackathon in Python</title>
          <author initials="S." surname="Kerr" fullname="Shane Kerr">
          </author>
          <date year="2018" month="July" day="14"/>
        </front>
     </reference>

     <reference anchor="CZDS" target="https://czds.icann.org/">
        <front>
          <title>Centralized Zone Data Service</title>
          <author>
            <organization>Internet Corporation for Assigned Names and Numbers</organization>
          </author>
          <date year="2018" month="October" day="5"/>
        </front>
     </reference>

     <reference anchor="RPZ" target="https://tools.ietf.org/html/draft-vixie-dnsop-dns-rpz-00">
        <front>
          <title>DNS Response Policy Zones (RPZ)</title>
          <author initials="P." surname="Vixie" fullname="Paul Vixie">
            <organization>Farsight Security, Inc.</organization>
          </author>
          <author initials="V." surname="Schryver" fullname="Vernon Schryver">
            <organization>Rhyolite Software, LLC</organization>
          </author>
          <date year="2018" month="June" day="21"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-vixie-dnsop-dns-rpz-00" />
     </reference>

    </references>

    <section title="Example Zones With Digests">
      <t>
        This appendix contains example zones with accurate &RRNAME; records.  These can be used to
        verify an implementation of the zone digest protocol.
      </t>

      <section title="Simple EXAMPLE Zone">
        <t>
          Here, the EXAMPLE zone contains an SOA record, NS and glue records, and a &RRNAME; record.
        </t>
        <figure><artwork align="left"><![CDATA[
example.      86400   IN  SOA     ns1 admin 2018031900 (
                                  1800 900 604800 86400 )
              86400   IN  NS      ns1
              86400   IN  NS      ns2
              86400   IN  ZONEMD  2018031900 1 1 (
                                  e12a0dd55a1dd1b8
                                  e29ec9b1d42d71ec
                                  09329da5f162f327
                                  e1eb4803947995ec
                                  f7c65aa566cf6cfd
                                  36a0caf8bdb03ac4 )
ns1           3600    IN  A       203.0.113.63
ns2           3600    IN  AAAA    2001:db8::63
]]></artwork></figure>
      </section>

      <section title="Complex EXAMPLE Zone">
        <t>
          Here, the EXAMPLE zone contains duplicate RRs, and an occluded RR, and one out-of-zone RR.
        </t>
        <figure><artwork align="left"><![CDATA[
example.      86400   IN  SOA     ns1 admin 2018031900 (
                                  1800 900 604800 86400 )
              86400   IN  NS      ns1
              86400   IN  NS      ns2
              86400   IN  ZONEMD  2018031900 1 1 (
                                  626637812169d7ab
                                  fcb24f13cb704f13
                                  b8a131fee1c3bc73
                                  29144fa5ec2608a4
                                  1b596d41ff8c8310
                                  b2897e73f6e521fc )
ns1           3600    IN  A       203.0.113.63
ns2           3600    IN  AAAA    2001:db8::63
occluded.sub  7200    IN  TXT     "I'm occluded but must be digested"
sub           7200    IN  NS      ns1
duplicate     300     IN  TXT     "I must be digested just once"
duplicate     300     IN  TXT     "I must be digested just once"
foo.test.     555     IN  TXT     "out-of-zone data must be excluded"
non-apex      900     IN  ZONEMD  2018031900 1 1 (
                                  616c6c6f77656420
                                  6275742069676e6f
                                  7265642e20616c6c
                                  6f77656420627574
                                  2069676e6f726564
                                  2e20616c6c6f7765 )
]]></artwork></figure>
      </section>

      <section title="EXAMPLE Zone with multiple digests">
        <t>
          Here, the EXAMPLE zone contains multiple &RRNAME; records. Since
          only one Hash Algorithm is defined at this time (SHA384), this
          example utilizes additional &RRNAME; records with Hash Algorithm
          values in the private range (240-254).  These additional
          private-range digests are not verifiable, but note that their
          other fields (Serial, Scheme, Hash Algorithm) are included in
          the calculation of all &RRNAME; digests.
        </t>
        <figure><artwork align="left"><![CDATA[
example.      86400   IN  SOA     ns1 admin 2018031900 (
                                  1800 900 604800 86400 )
example.      86400   IN  NS      ns1.example.
example.      86400   IN  NS      ns2.example.
example.      86400   IN  ZONEMD  2018031900 1 1 (
                                  366d22ea3bd8df44
                                  0fa44b6213359d9b
                                  1f73bb9d8dd67a1b
                                  4c0bdf6f0b3657c5
                                  0316f770fbb03057
                                  0c06adb87c121431 )
example.      86400   IN  ZONEMD  2018031900 1 240 (
                                  e2d523f654b9422a
                                  96c5a8f44607bbee )
example.      86400   IN  ZONEMD  2018031900 1 241 (
                                  5732dd91240611f8
                                  314adb6b4769bdd2 )
example.      86400   IN  ZONEMD  2018031900 1 242 (
                                  7c32e06779315c7d
                                  81ba8c72f5cf9116
                                  496b6395 )
example.      86400   IN  ZONEMD  2018031900 1 243 (
                                  183770af4a629f80
                                  2e674e305b8d0d11
                                  3dfe0837 )
example.      86400   IN  ZONEMD  2018031900 1 244 (
                                  e1846540e33a9e41
                                  89792d18d5d131f6
                                  05fc283e )
example.      86400   IN  ZONEMD  2018031900 240 1 (
                                  e1846540e33a9e41
                                  89792d18d5d131f6
                                  05fc283e )
ns1.example.  3600    IN  A       203.0.113.63
ns2.example.  86400   IN  TXT     "This example has multiple digests"
ns2.example.  3600    IN  AAAA    2001:db8::63
]]></artwork></figure>
      </section>

      <section title="The URI.ARPA Zone">
        <t>
          The URI.ARPA zone retrieved 2018-10-21.
          Note this sample zone has (expired) signatures, but
          no signature for the &RRNAME; RR.
        </t>
        <figure><artwork align="left"><![CDATA[
; <<>> DiG 9.9.4 <<>> @lax.xfr.dns.icann.org uri.arpa axfr
; (2 servers found)
;; global options: +cmd
uri.arpa.         3600    IN      SOA     sns.dns.icann.org. (
    noc.dns.icann.org. 2018100702 10800 3600 1209600 3600 )
uri.arpa.         3600    IN      RRSIG   NSEC 8 2 3600 (
    20181028142623 20181007205525 47155 uri.arpa. 
    eEC4w/oXLR1Epwgv4MBiDtSBsXhqrJVvJWUpbX8XpetAvD35bxwNCUTi 
    /pAJVUXefegWeiriD2rkTgCBCMmn7YQIm3gdR+HjY/+o3BXNQnz97f+e 
    HAE9EDDzoNVfL1PyV/2fde9tDeUuAGVVwmD399NGq9jWYMRpyri2kysr q/g= )
uri.arpa.         86400   IN      RRSIG   NS 8 2 86400 (
    20181028172020 20181007175821 47155 uri.arpa. 
    ATyV2A2A8ZoggC+68u4GuP5MOUuR+2rr3eWOkEU55zAHld/7FiBxl4ln 
    4byJYy7NudUwlMOEXajqFZE7DVl8PpcvrP3HeeGaVzKqaWj+aus0jbKF 
    Bsvs2b1qDZemBfkz/IfAhUTJKnto0vSUicJKfItu0GjyYNJCz2CqEuGD Wxc= )
uri.arpa.         600     IN      RRSIG   MX 8 2 600 (
    20181028170556 20181007175821 47155 uri.arpa. 
    e7/r3KXDohX1lyVavetFFObp8fB8aXT76HnN9KCQDxSnSghNM83UQV0t 
    lTtD8JVeN1mCvcNFZpagwIgB7XhTtm6Beur/m5ES+4uSnVeS6Q66HBZK 
    A3mR95IpevuVIZvvJ+GcCAQpBo6KRODYvJ/c/ZG6sfYWkZ7qg/Em5/+3 4UI= )
uri.arpa.         3600    IN      RRSIG   DNSKEY 8 2 3600 (
    20181028152832 20181007175821 15796 uri.arpa. 
    nzpbnh0OqsgBBP8St28pLvPEQ3wZAUdEBuUwil+rtjjWlYYiqjPxZ286 
    XF4Rq1usfV5x71jZz5IqswOaQgia91ylodFpLuXD6FTGs2nXGhNKkg1V 
    chHgtwj70mXU72GefVgo8TxrFYzxuEFP5ZTP92t97FVWVVyyFd86sbbR 
    6DZj3uA2wEvqBVLECgJLrMQ9Yy7MueJl3UA4h4E6zO2JY9Yp0W9woq0B 
    dqkkwYTwzogyYffPmGAJG91RJ2h6cHtFjEZe2MnaY2glqniZ0WT9vXXd 
    uFPm0KD9U77Ac+ZtctAF9tsZwSdAoL365E2L1usZbA+K0BnPPqGFJRJk 
    5R0A1w== )
uri.arpa.         3600    IN      RRSIG   DNSKEY 8 2 3600 (
    20181028152832 20181007175821 55480 uri.arpa. 
    lWtQV/5szQjkXmbcD47/+rOW8kJPksRFHlzxxmzt906+DBYyfrH6uq5X 
    nHvrUlQO6M12uhqDeL+bDFVgqSpNy+42/OaZvaK3J8EzPZVBHPJykKMV 
    63T83aAiJrAyHzOaEdmzLCpalqcEE2ImzlLHSafManRfJL8Yuv+JDZFj 
    2WDWfEcUuwkmIZWX11zxp+DxwzyUlRl7x4+ok5iKZWIg5UnBAf6B8T75 
    WnXzlhCw3F2pXI0a5LYg71L3Tp/xhjN6Yy9jGlIRf5BjB59X2zra3a2R 
    PkI09SSnuEwHyF1mDaV5BmQrLGRnCjvwXA7ho2m+vv4SP5dUdXf+GTeA 
    1HeBfw== )
uri.arpa.         3600    IN      RRSIG   SOA 8 2 3600 (
    20181029114753 20181008222815 47155 uri.arpa. 
    qn8yBNoHDjGdT79U2Wu9IIahoS0YPOgYP8lG+qwPcrZ1BwGiHywuoUa2 
    Mx6BWZlg+HDyaxj2iOmox+IIqoUHhXUbO7IUkJFlgrOKCgAR2twDHrXu 
    9BUQHy9SoV16wYm3kBTEPyxW5FFm8vcdnKAF7sxSY8BbaYNpRIEjDx4A JUc= )
uri.arpa.         3600    IN      NSEC    ftp.uri.arpa. NS SOA (
    MX RRSIG NSEC DNSKEY )
uri.arpa.         86400   IN      NS      a.iana-servers.net. 
uri.arpa.         86400   IN      NS      b.iana-servers.net. 
uri.arpa.         86400   IN      NS      c.iana-servers.net. 
uri.arpa.         86400   IN      NS      ns2.lacnic.net. 
uri.arpa.         86400   IN      NS      sec3.apnic.net. 
uri.arpa.         600     IN      MX      10 pechora.icann.org. 
uri.arpa.         3600    IN      DNSKEY  256 3 8 (
    AwEAAcBi7tSart2J599zbYWspMNGN70IBWb4ziqyQYH9MTB/VCz6WyUK 
    uXunwiJJbbQ3bcLqTLWEw134B6cTMHrZpjTAb5WAwg4XcWUu8mdcPTiL 
    Bl6qVRlRD0WiFCTzuYUfkwsh1Rbr7rvrxSQhF5rh71zSpwV5jjjp65Wx 
    SdJjlH0B )
uri.arpa.         3600    IN      DNSKEY  257 3 8 (
    AwEAAbNVv6ulgRdO31MtAehz7j3ALRjwZglWesnzvllQl/+hBRZr9QoY 
    cO2I+DkO4Q1NKxox4DUIxj8SxPO3GwDuOFR9q2/CFi2O0mZjafbdYtWc 
    3zSdBbi3q0cwCIx7GuG9eqlL+pg7mdk9dgdNZfHwB0LnqTD8ebLPsrO/ 
    Id7kBaiqYOfMlZnh2fp+2h6OOJZHtY0DK1UlssyB5PKsE0tVzo5s6zo9 
    iXKe5u+8WTMaGDY49vG80JPAKE7ezMiH/NZcUMiE0PRZ8D3foq2dYuS5 
    ym+vA83Z7v8A+Rwh4UGnjxKB8zmr803V0ASAmHz/gwH5Vb0nH+LObwFt 
    l3wpbp+Wpm8= )
uri.arpa.         3600    IN      DNSKEY  257 3 8 (
    AwEAAbwnFTakCvaUKsXji4mgmxZUJi1IygbnGahbkmFEa0L16J+TchKR 
    wcgzVfsxUGa2MmeA4hgkAooC3uy+tTmoMsgy8uq/JAj24DjiHzd46LfD 
    FK/qMidVqFpYSHeq2Vv5ojkuIsx4oe4KsafGWYNOczKZgH5loGjN2aJG 
    mrIm++XCphOskgCsQYl65MIzuXffzJyxlAuts+ecAIiVeqRaqQfr8LRU 
    7wIsLxinXirprtQrbor+EtvlHp9qXE6ARTZDzf4jvsNpKvLFZtmxzFf3 
    e/UJz5eHjpwDSiZL7xE8aE1o1nGfPtJx9ZnB3bapltaJ5wY+5XOCKgY0 
    xmJVvNQlwdE= )
ftp.uri.arpa.     3600    IN      RRSIG   NSEC 8 3 3600 (
    20181028080856 20181007175821 47155 uri.arpa. 
    HClGAqPxzkYkAT7Q/QNtQeB6YrkP6EPOef+9Qo5/2zngwAewXEAQiyF9 
    jD1USJiroM11QqBS3v3aIdW/LXORs4Ez3hLcKNO1cKHsOuWAqzmE+BPP 
    Arfh8N95jqh/q6vpaB9UtMkQ53tM2fYU1GszOLN0knxbHgDHAh2axMGH lqM= )
ftp.uri.arpa.     604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181028103644 20181007205525 47155 uri.arpa. 
    WoLi+vZzkxaoLr2IGZnwkRvcDf6KxiWQd1WZP/U+AWnV+7MiqsWPZaf0 
    9toRErerGoFOiOASNxZjBGJrRgjmavOM9U+LZSconP9zrNFd4dIu6kp5 
    YxlQJ0uHOvx1ZHFCj6lAt1ACUIw04ZhMydTmi27c8MzEOMepvn7iH7r7 k7k= )
ftp.uri.arpa.     3600    IN      NSEC    http.uri.arpa. NAPTR (
    RRSIG NSEC )
ftp.uri.arpa.     604800  IN      NAPTR   0 0 "" "" (
    "!^ftp://([^:/?#]*).*$!\\1!i" . )
http.uri.arpa.    3600    IN      RRSIG   NSEC 8 3 3600 (
    20181029010647 20181007175821 47155 uri.arpa. 
    U03NntQ73LHWpfLmUK8nMsqkwVsOGW2KdsyuHYAjqQSZvKbtmbv7HBmE 
    H1+Ii3Z+wtfdMZBy5aC/6sHdx69BfZJs16xumycMlAy6325DKTQbIMN+ 
    ift9GrKBC7cgCd2msF/uzSrYxxg4MJQzBPvlkwXnY3b7eJSlIXisBIn7 3b8= )
http.uri.arpa.    604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181029011815 20181007205525 47155 uri.arpa. 
    T7mRrdag+WSmG+n22mtBSQ/0Y3v+rdDnfQV90LN5Fq32N5K2iYFajF7F 
    Tp56oOznytfcL4fHrqOE0wRc9NWOCCUec9C7Wa1gJQcllEvgoAM+L6f0 
    RsEjWq6+9jvlLKMXQv0xQuMX17338uoD/xiAFQSnDbiQKxwWMqVAimv5 7Zs= )
http.uri.arpa.    3600    IN      NSEC    mailto.uri.arpa. NAPTR (
    RRSIG NSEC )
http.uri.arpa.    604800  IN      NAPTR   0 0 "" "" (
    "!^http://([^:/?#]*).*$!\\1!i" . )
mailto.uri.arpa.  3600    IN      RRSIG   NSEC 8 3 3600 (
    20181028110727 20181007175821 47155 uri.arpa. 
    GvxzVL85rEukwGqtuLxek9ipwjBMfTOFIEyJ7afC8HxVMs6mfFa/nEM/ 
    IdFvvFg+lcYoJSQYuSAVYFl3xPbgrxVSLK125QutCFMdC/YjuZEnq5cl 
    fQciMRD7R3+znZfm8d8u/snLV9w4D+lTBZrJJUBe1Efc8vum5vvV7819 ZoY= )
mailto.uri.arpa.  604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181028141825 20181007205525 47155 uri.arpa. 
    MaADUgc3fc5v++M0YmqjGk3jBdfIA5RuP62hUSlPsFZO4k37erjIGCfF 
    j+g84yc+QgbSde0PQHszl9fE/+SU5ZXiS9YdcbzSZxp2erFpZOTchrpg 
    916T4vx6i59scodjb0l6bDyZ+mtIPrc1w6b4hUyOUTsDQoAJYxdfEuMg Vy4= )
mailto.uri.arpa.  3600    IN      NSEC    urn.uri.arpa. NAPTR (
    RRSIG NSEC )
mailto.uri.arpa.  604800  IN      NAPTR   0 0 "" "" (
    "!^mailto:(.*)@(.*)$!\\2!i" . )
urn.uri.arpa.     3600    IN      RRSIG   NSEC 8 3 3600 (
    20181028123243 20181007175821 47155 uri.arpa. 
    Hgsw4Deops1O8uWyELGe6hpR/OEqCnTHvahlwiQkHhO5CSEQrbhmFAWe 
    UOkmGAdTEYrSz+skLRQuITRMwzyFf4oUkZihGyhZyzHbcxWfuDc/Pd/9 
    DSl56gdeBwy1evn5wBTms8yWQVkNtphbJH395gRqZuaJs3LD/qTyJ5Dp LvA= )
urn.uri.arpa.     604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181029071816 20181007205525 47155 uri.arpa. 
    ALIZD0vBqAQQt40GQ0Efaj8OCyE9xSRJRdyvyn/H/wZVXFRFKrQYrLAS 
    D/K7q6CMTOxTRCu2J8yes63WJiaJEdnh+dscXzZkmOg4n5PsgZbkvUSW 
    BiGtxvz5jNncM0xVbkjbtByrvJQAO1cU1mnlDKe1FmVB1uLpVdA9Ib4J hMU= )
urn.uri.arpa.     3600    IN      NSEC    uri.arpa. NAPTR RRSIG (
    NSEC )
urn.uri.arpa.     604800  IN      NAPTR   0 0 "" "" (
    "/urn:([^:]+)/\\1/i" . )
uri.arpa.         3600    IN      SOA     sns.dns.icann.org. (
    noc.dns.icann.org. 2018100702 10800 3600 1209600 3600 )
;; Query time: 66 msec
;; SERVER: 192.0.32.132#53(192.0.32.132)
;; WHEN: Sun Oct 21 20:39:28 UTC 2018
;; XFR size: 34 records (messages 1, bytes 3941)
uri.arpa.       3600    IN      ZONEMD  2018100702 1 1 (
    cc4a0b6556272fc739b8ff74b80b4a43ac9575d91445ecc0dc22f5
    09fa27c62448a7100660bbdb4c90667424b734956b )
]]></artwork></figure>
      </section>

      <section title="The ROOT-SERVERS.NET Zone">
        <t>
          The ROOT-SERVERS.NET zone retreived 2018-10-21.
        </t>
        <figure><artwork align="left"><![CDATA[
root-servers.net.     3600000 IN  SOA     a.root-servers.net. (
    nstld.verisign-grs.com. 2018091100 14400 7200 1209600 3600000 )
root-servers.net.     3600000 IN  NS      a.root-servers.net.
root-servers.net.     3600000 IN  NS      b.root-servers.net.
root-servers.net.     3600000 IN  NS      c.root-servers.net.
root-servers.net.     3600000 IN  NS      d.root-servers.net.
root-servers.net.     3600000 IN  NS      e.root-servers.net.
root-servers.net.     3600000 IN  NS      f.root-servers.net.
root-servers.net.     3600000 IN  NS      g.root-servers.net.
root-servers.net.     3600000 IN  NS      h.root-servers.net.
root-servers.net.     3600000 IN  NS      i.root-servers.net.
root-servers.net.     3600000 IN  NS      j.root-servers.net.
root-servers.net.     3600000 IN  NS      k.root-servers.net.
root-servers.net.     3600000 IN  NS      l.root-servers.net.
root-servers.net.     3600000 IN  NS      m.root-servers.net.
a.root-servers.net.   3600000 IN  AAAA    2001:503:ba3e::2:30
a.root-servers.net.   3600000 IN  A       198.41.0.4
b.root-servers.net.   3600000 IN  MX      20 mail.isi.edu.
b.root-servers.net.   3600000 IN  AAAA    2001:500:200::b
b.root-servers.net.   3600000 IN  A       199.9.14.201
c.root-servers.net.   3600000 IN  AAAA    2001:500:2::c
c.root-servers.net.   3600000 IN  A       192.33.4.12
d.root-servers.net.   3600000 IN  AAAA    2001:500:2d::d
d.root-servers.net.   3600000 IN  A       199.7.91.13
e.root-servers.net.   3600000 IN  AAAA    2001:500:a8::e
e.root-servers.net.   3600000 IN  A       192.203.230.10
f.root-servers.net.   3600000 IN  AAAA    2001:500:2f::f
f.root-servers.net.   3600000 IN  A       192.5.5.241
g.root-servers.net.   3600000 IN  AAAA    2001:500:12::d0d
g.root-servers.net.   3600000 IN  A       192.112.36.4
h.root-servers.net.   3600000 IN  AAAA    2001:500:1::53
h.root-servers.net.   3600000 IN  A       198.97.190.53
i.root-servers.net.   3600000 IN  MX      10 mx.i.root-servers.org.
i.root-servers.net.   3600000 IN  AAAA    2001:7fe::53
i.root-servers.net.   3600000 IN  A       192.36.148.17
j.root-servers.net.   3600000 IN  AAAA    2001:503:c27::2:30
j.root-servers.net.   3600000 IN  A       192.58.128.30
k.root-servers.net.   3600000 IN  AAAA    2001:7fd::1
k.root-servers.net.   3600000 IN  A       193.0.14.129
l.root-servers.net.   3600000 IN  AAAA    2001:500:9f::42
l.root-servers.net.   3600000 IN  A       199.7.83.42
m.root-servers.net.   3600000 IN  AAAA    2001:dc3::35
m.root-servers.net.   3600000 IN  A       202.12.27.33
root-servers.net.     3600000 IN  SOA     a.root-servers.net. (
    nstld.verisign-grs.com. 2018091100 14400 7200 1209600 3600000 )
root-servers.net.     3600000 IN  ZONEMD  2018091100 1 1 (
    4fb752b314e4dccb845832b611590b669a80daebb736d4bd22aa76ec06
    6737c79185c1f7dfd49ec91d9523e6240ea2c4 )
]]></artwork></figure>
      </section>
    </section>

  </back>
</rfc>
