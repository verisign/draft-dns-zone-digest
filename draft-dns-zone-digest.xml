<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
There has to be one entity for each item to be referenced.
An alternate method (rfc include) is described in the references. --><!ENTITY RFC5966 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5966.xml">
<!ENTITY I-D.ietf-dprive-xfr-over-tls SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dprive-xfr-over-tls-02.xml">
<!ENTITY RFC1034 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC1995 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1995.xml">
<!ENTITY RFC2065 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2065.xml">
<!ENTITY RFC2119 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2181 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2535 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2535.xml">
<!ENTITY RFC2629 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC2845 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2845.xml">
<!ENTITY RFC2931 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2931.xml">
<!ENTITY RFC3258 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3258.xml">
<!ENTITY RFC3658 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3658.xml">
<!ENTITY RFC4033 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC4509 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4509.xml">
<!ENTITY RFC4880 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4880.xml">
<!ENTITY RFC5155 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5155.xml">
<!ENTITY RFC5751 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5751.xml">
<!ENTITY RFC5933 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5933.xml">
<!ENTITY RFC5936 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5936.xml">
<!ENTITY RFC6234 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml">
<!ENTITY RFC7696 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7696.xml">
<!ENTITY RFC8806 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8806.xml">
<!ENTITY RFC8126 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC8174 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8484 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8484.xml">
<!ENTITY RFC8499 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8499.xml">
<!ENTITY RFC8901 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8901.xml">
<!ENTITY RRNAME "ZONEMD">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-ietf-dnsop-dns-zone-digest-14" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
  ipr values: full3667, noModification3667, noDerivatives3667
  you can add the attributes updates="NNNN" and obsoletes="NNNN"
  they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
    full title is longer than 39 characters -->

    <title abbrev="DNS Zone Digest">Message Digest for DNS Zones</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Duane Wessels" initials="D." surname="Wessels">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>dwessels@verisign.com</email>
        <uri>https://verisign.com</uri>
      </address>
    </author>

    <author fullname="Piet Barber" initials="P." surname="Barber">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>pbarber@verisign.com</email>
        <uri>https://verisign.com</uri>
      </address>
    </author>

    <author fullname="Matt Weinberg" initials="M." surname="Weinberg">
      <organization>Amazon</organization>
      <address>
        <email>matweinb@amazon.com</email>
        <uri>https://amazon.com</uri>
      </address>
    </author>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <author fullname="Wes Hardaker" initials="W." surname="Hardaker">
      <organization>USC/ISI</organization>
      <address>
        <postal>
          <street>P.O. Box 382</street>
          <city>Davis</city>
          <region>CA</region>
          <code>95617</code>
        </postal>
        <email>ietf@hardakers.net</email>
      </address>
    </author>

    <date day="9" month="October" year="2020"/>

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>DNS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>Checksum</keyword>
    <keyword>Hash</keyword>
    <keyword>Zone Transfer</keyword>

    <abstract>
      <t>
        This document describes a protocol and new DNS Resource Record
        that provides a cryptographic message digest over DNS zone data at rest.
        The &RRNAME; Resource Record conveys the digest data in
        the zone itself.
        When used in combination with DNSSEC, &RRNAME; allows recipients
        to verify the zone contents for data integrity and origin authenticity.
        This provides assurance that received zone data matches
        published data, regardless of how the zone data has been
        transmitted and received.  When used without DNSSEC, &RRNAME;
        functions as a checksum, guarding only against unintentional changes.
      </t>
      <t>
        &RRNAME; does not replace DNSSEC.
        Whereas DNSSEC protects individual RRSets (DNS data with
        fine granularity), &RRNAME; protects a zone's data
        as a whole, whether consumed by authoritative name
        servers, recursive name servers, or any other applications.
      </t>
      <t>
        As specified herein, &RRNAME; is impractical
        for large, dynamic zones due to the time and resources
        required for digest calculation.
        However, The &RRNAME; record is extensible
        so that new digest schemes may be added in the future to support large, dynamic
        zones.
      </t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction">
      <t>
        In the DNS, a zone is the collection of authoritative resource
        records (RRs) sharing a common origin (<xref target="RFC8499"/>).
        Zones are often stored as files in the so-called
        master file format <xref target="RFC1034"/>.
        Zones are generally distributed among name servers using
        the AXFR (zone transfer <xref target="RFC5936"/>), and IXFR (incremental zone transfer <xref target="RFC1995"/>)
        protocols.
        They can also be distributed outside of the DNS, with any file transfer
        protocol such as FTP, HTTP, and rsync, or even as email attachments.
        Currently, there is no standard way to compute a hash or message digest for
        a stand-alone zone.
      </t>
      <t>
        This document specifies an RR type that provides a
        cryptographic message digest of the data in a zone.
        It allows a receiver of the zone to verify the zone's
        integrity and authenticity when used in combination with DNSSEC.
        The
        digest RR is a part of the zone itself, allowing
        verification of the zone, no matter how it is
        transmitted.
        The digest uses the wire format of zone data in a canonical ordering.
        Thus, it is independent of presentation format, such as
        whitespace, capitalization, and comments.
      </t>
      <t>
        This specification is OPTIONAL to implement by both publishers
        and consumers of zone data.
      </t>
      <section title="Motivation">
        <t>
          The primary motivation for this protocol enhancement is the desire
          to verify the data integrity and origin authenticity of a stand-alone zone,
          regardless of how it is transmitted.  A consumer of zone data
          should be able to verify that it is as-published by the
          zone operator.
        </t>
        <t>
          Note, however, that integrity and authenticity can only be
          assured when the zone is signed.
          DNSSEC provides three strong security guarantees relevant
          to this protocol:
          <list style="numbers">
          <t>whether or not to expect DNSSEC records in the zone,</t>
          <t>whether or not to expect a &RRNAME; record in a signed zone, and</t>
          <t>whether or not the &RRNAME; record has been altered since it was signed.</t>
          </list>
        </t>
        <t>
          A secondary motivation is to provide the equivalent of a
          checksum, allowing a zone recipient to check for unintended
          changes and operational errors, such as accidental truncation.
        </t>
      </section>
      <section title="Alternative Approaches">
        <t>
          One approach to preventing data tampering and corruption is
          to secure the distribution channel.  The DNS has a number
          of features that are already used for channel security.
          Perhaps the most widely used is DNS transaction signatures
          (TSIG <xref target="RFC2845"/>).  TSIG uses shared secret keys
          and a message digest to protect individual query and response
          messages. It is generally used to authenticate and validate
          UPDATE <xref target="RFC2136"/>, AXFR <xref target="RFC5936"/>,
          and IXFR <xref target="RFC1995"/> messages.
        </t>
        <t>
          DNS Request and Transaction Signatures (SIG(0) <xref
          target="RFC2931"/>) is another protocol extension that
          authenticates individual DNS transactions.  Whereas SIG records
          normally cover specific RR types, SIG(0)
          is used to sign an entire DNS message.  Unlike TSIG, SIG(0)
          uses public key cryptography rather than shared secrets.
        </t>
        <t>
          The Transport Layer Security protocol suite also
          provides channel security.
          The DPRIVE working group is in the process of specifying
          DNS Zone Transfer-over-TLS <xref target="I-D.ietf-dprive-xfr-over-tls"/>.
          One can also easily imagine
          the distribution of zones over HTTPS-enabled web servers,
          as well as DNS-over-HTTPS <xref target="RFC8484"/>.
        </t>
        <t>
          Unfortunately, the protections provided by these channel
          security techniques are (in practice) ephemeral and are not retained after the
          data transfer is complete.  They ensure that the client
          receives the data from the expected server, and that the
          data sent by the server is not modified during transmission.
          However, they do not guarantee that the server transmits the
          data as originally published, and do not provide any methods
          to verify data that is read after transmission is complete.
          For example, a name server loading saved zone data upon restart
          cannot guarantee that the on-disk data has not been modified.
          Such modification could be the result of
          an accidental corruption of the file, or perhaps an incompletely
          saved file <xref target="disk-full-failure"/>.
          For these reasons, it is preferable to protect the integrity of the data itself.
        </t>

        <t>
          Why not simply rely on DNSSEC, which provides certain data security guarantees?
          For zones that are signed, a recipient could
          validate all of the signed RRSets.  Additionally, denial-of-existence
          records prove that RRSets have not been added or
          removed.  However,
          delegations (non-apex NS records) are not signed by DNSSEC,
          and neither are any glue records.  &RRNAME; protects the integrity of delegation,
          glue, and other records that are not otherwise covered by DNSSEC. Furthermore, zones
          that employ NSEC3 with opt-out <xref target="RFC5155"/> are susceptible to the
          removal or addition of names between the signed nodes.
          Whereas DNSSEC primarily protects consumers
          of DNS response messages, this protocol
          protects consumers of zones.
        </t>
        <t>
          There are existing tools and protocols that provide data
          security, such as OpenPGP <xref target="RFC4880"/> and S/MIME
          <xref target="RFC5751"/>.  In fact, the internic.net site
          publishes PGP signatures alongside the root zone and other
          files available there.  However, this is a detached signature
          with no strong association to the corresponding zone file other
          than its timestamp.  Non-detached signatures are, of course,
          possible, but these necessarily change the format of the file
          being distributed; a zone signed with OpenPGP or
          S/MIME no longer looks like a DNS zone and could not directly
          be loaded into a name server.  Once loaded the signature data
          is lost, so it cannot be further propagated.
        </t>
        <t>
          It seems the desire for data security in DNS zones was envisioned
          as far back as 1997.
          <xref target="RFC2065"/> is an obsoleted specification
          of the first generation DNSSEC Security Extensions.  It
          describes a zone transfer signature, identified as the AXFR SIG, which
          is similar to the technique proposed by this document.
          That is, it proposes ordering all (signed) RRSets in a zone,
          hashing their contents, and then signing the zone hash.
          The AXFR SIG is described only for use during zone
          transfers.  It did not postulate the need to validate
          zone data distributed outside of the DNS.  Furthermore,
          its successor, <xref target="RFC2535"/>, omits the AXFR
          SIG, while at the same time introducing an IXFR SIG.
        </t>
      </section>

      <section title="Design Overview">
        <t>
          This document specifies a new Resource Record type
          to convey a message digest of the content of a zone.
          The digest is calculated at the time of zone publication.
          If the zone is signed with DNSSEC, any
          modifications of the digest can be detected.  The procedures for
          digest calculation and DNSSEC signing are similar.  Both require
          data to be processed in a well-defined order and format.
          It may be possible to perform DNSSEC signing and
          digest calculation in parallel.
        </t>
        <t>
          The zone digest is designed to be used on zones that
          have infrequent updates.  As specified herein,
          the digest is re-calculated over the entire zone
          content each time the zone is updated.  This specification does not provide
          an efficient mechanism for updating the digest on incremental updates of zone
          data.  It is, however, extensible so that
          future schemes may be defined to support efficient incremental
          digest updates.
        </t>
        <t>
          It is expected that verification of a zone digest will be
          implemented in name server software.  That is, a name server
          can verify the zone data it was given and refuse to serve a
          zone which fails verification.  For signed zones, the name
          server needs a trust anchor to perform DNSSEC validation.
          For signed non-root zones, the name server may need to send
          queries to validate a chain of trust.  Digest verification
          could also be performed externally.
        </t>
      </section>

      <section title="Use Cases">
        <section title="Root Zone">
          <t>
            The root zone <xref target="InterNIC"/>
            is one of the most widely distributed DNS zone on the Internet,
            served by more than 1000 separate instances <xref target="RootServers"/>
            at the time of this writing.  Additionally, many organizations
            configure their own name servers to serve the root zone locally.
            Reasons for doing so include privacy and reduced access time.
            <xref target="RFC8806"/> describes one way
            to do this.  As the root zone spreads beyond its traditional
            deployment boundaries, the verification of the
            completeness of the zone contents becomes more
            important.
          </t>
        </section>
        <section title="Providers, Secondaries, and Anycast">
          <t>
            Since its very early days, the developers of the DNS
            recognized the importance of secondary name servers and
            service diversity.  However,
            modern DNS service has complex provisioning which
            includes multiple third-party providers (<xref target="RFC8901"/>) and hundreds
            of anycast instances (<xref target="RFC3258"/>).  Instead of a simple primary-to-secondary
            zone distribution system, today it is possible to have
            multiple levels, multiple parties, and multiple protocols
            involved in the distribution of zone data.  This complexity
            introduces new places for problems to arise.  The zone digest
            protects the integrity of data that flows through such systems.
          </t>
        </section>
        <section title="Response Policy Zones">
          <t>
            A Response Policy Zone (RPZ) is "a mechanism to introduce a
            customized policy in Domain Name System servers, so that
            recursive resolvers return possibly modified results"
            <xref target="RPZ"/>.
            The policy information is carried inside specially constructed DNS zones.
            A number of companies provide RPZ feeds, which are
            consumed by name server and firewall products.
            While RPZ zones can
            be signed with DNSSEC, the data is not queried directly,
            and would not be subject to DNSSEC validation.
          </t>
        </section>
        <section title="Centralized Zone Data Service">
          <t>
            ICANN operates the Centralized Zone Data Service <xref
            target="CZDS"/>, which is a repository of top-level
            domain zone files.  Users that have been granted access are then able to download
            zone data.  Adding a zone digest to
            these would provide CZDS users with assurances that the
            data has not been modified between origination and retrieval.
            Note that &RRNAME; could be added to zone data supplied to
            CZDS without requiring it to be present in the zone data
            served by production name servers, since the digest is
            inherently attached to the specific copy of the zone.
          </t>
        </section>
        <section title="General Purpose Comparison Check">
          <t>
            Since the zone digest calculation does not depend on presentation
            format, it could be used to compare multiple copies of
            a zone received from different sources, or copies
            generated by different processes.  In this case, it serves
            as a checksum and can be useful even for unsigned zones.
          </t>
        </section>
      </section>

      <section title="Terminology">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
          capitals, as shown here.
        </t>
        <t>
          The terms Private Use, Reserved, Unassigned, and Specification
          Required are to be interpreted as defined in <xref
          target="RFC8126"/>.
        </t>
      </section>
    </section>

    <section title="The &RRNAME; Resource Record" anchor="rrtype">
      <t>
        This section describes the &RRNAME; Resource Record, including its fields, wire format, and presentation format.
        The Type value for the &RRNAME; RR is 63.
        The &RRNAME; RR is class independent.
        The RDATA of the resource record consists of four fields: Serial, Scheme, Hash Algorithm, and Digest.
      </t>

      <t>
       A zone MAY contain multiple &RRNAME; RRs to support algorithm
       agility <xref target="RFC7696"/>.
       [RFC Editor: change that to BCP 201]
       When multiple &RRNAME; RRs are present, each MUST specify a unique Scheme and Hash Algorithm tuple.
       It is RECOMMENDED that a zone include only one &RRNAME; RR, unless
       the zone publisher is in the process of transitioning to a new
       Scheme or Hash Algorithm.
      </t>

      <section title="Non-apex &RRNAME; Records">
        <t>
          This document specifies &RRNAME; RRs located at the
          zone apex.  Non-apex &RRNAME; RRs are not forbidden, but
          have no meaning in this specification.
          Non-apex &RRNAME; RRs MUST NOT be used for verification.
        </t>
        <t>
          During digest calculation,
          non-apex &RRNAME; RRs are treated as ordinary RRs.
          They are digested as-is and the RR is not replaced
          by a placeholder RR.
        </t>
        <t>
          Unless explicitly stated otherwise, "&RRNAME;" always refers
          to apex records throughout this document.
        </t>
      </section>

      <section title="&RRNAME; RDATA Wire Format">
        <t>The &RRNAME; RDATA wire format is encoded as follows:</t>
        <figure><artwork align="left"><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             Serial                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Scheme     |Hash Algorithm |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
|                             Digest                            |
/                                                               /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

        <section title="The Serial Field">
          <t>
            The Serial field is a 32-bit unsigned integer in network byte
            order. It is the serial number from the zone's
            SOA record (<xref target="RFC1035"/> section 3.3.13) for
            which the zone digest was generated.
          </t>
          <t>
            It is included here to clearly bind the &RRNAME; RR
            to a particular version of the zone's content.
            Without the serial number, a stand-alone &RRNAME; digest
            has no obvious association to any particular instance of a zone.
          </t>
        </section>

        <section title="The Scheme Field">
          <t>
            The Scheme field is an 8-bit unsigned integer that identifies
            the methods by which data is collated and presented
            as input to the hashing function.
          </t>
          <t>
            Herein, SIMPLE, with Scheme value 1, is the only
            standardized Scheme defined for &RRNAME; records and it MUST be implemented.  The Scheme registry
            is further described in <xref target="iana"/>.
          </t>
          <t>
            Scheme values 240-254 are allocated for Private Use.
          </t>
        </section>

        <section title="The Hash Algorithm Field">
          <t>
            The Hash Algorithm field is an 8-bit unsigned integer
            that identifies the cryptographic hash algorithm
            used to construct the digest.
          </t>
          <t>
            Herein, SHA384 <xref target="RFC6234"/>, with Hash Algorithm value 1, is the only
            standardized
            Hash Algorithm defined for &RRNAME; records that MUST be implemented.
            When SHA384 is used, the size of the Digest field is 48 octets.
            The result of the SHA384 digest algorithm MUST NOT be truncated, and the entire
            48 octet digest is published in the &RRNAME; record.
          </t>
          <t>
            SHA512 <xref target="RFC6234"/>, with Hash Algorithm value 2, is also defined for &RRNAME; records,
            and SHOULD be implemented.
            When SHA512 is used, the size of the Digest field is 64 octets.
            The result of the SHA512 digest algorithm MUST NOT be truncated, and the entire
            64 octet digest is published in the &RRNAME; record.
          </t>
          <t>
            Hash Algorithm values 240-254 are allocated for Private Use.
          </t>
          <t>
            The Hash Algorithm registry
            is further described in <xref target="iana"/>.
          </t>
        </section>

        <section title="The Digest Field">
          <t>
            The Digest field is a variable-length sequence of octets
            containing the output of the hash algorithm.
            The length of the Digest field is determined by deducting
            the fixed size of the Serial, Scheme, and Hash Algorithm
            fields from the RDATA size in the &RRNAME; RR header.
          </t>
          <t>
            The Digest field MUST NOT be shorter than 12 octets.
            Digests for the SHA384 and SHA512 hash algorithms specified herein are
            never truncated.  Digests for future hash algorithms MAY be truncated,
            but MUST NOT be truncated to a length that results in less than
            96-bits (12 octets) of equivalent strength.
          </t>
          <t>
            <xref target="calculating"/>
            describes how to calculate the digest for a zone.
            <xref target="verifying"/> describes how to use the digest to
            verify the contents of a zone.
          </t>
        </section>
      </section>

      <section title="&RRNAME; Presentation Format">
        <t>
          The presentation format of the RDATA portion is as follows:
        </t>
        <t>
          The Serial field is represented as an unsigned decimal integer.
        </t>
        <t>
          The Scheme field is represented as an unsigned decimal integer.
        </t>
        <t>
          The Hash Algorithm field is represented as an unsigned decimal
          integer.
        </t>
        <t>
          The Digest is represented as a sequence of case-insensitive
          hexadecimal digits.  Whitespace is allowed within the hexadecimal
          text.
        </t>
      </section>

      <section title="&RRNAME; Example">
        <t>
          The following example shows a &RRNAME; RR in presentation format:
        </t>
        <figure><artwork>
example.com. 86400 IN &RRNAME; 2018031500 1 1 (
    FEBE3D4CE2EC2FFA4BA99D46CD69D6D29711E55217057BEE
    7EB1A7B641A47BA7FED2DD5B97AE499FAFA4F22C6BD647DE )
        </artwork></figure>
      </section>

    </section>

    <section title="Calculating the Digest" anchor="calculating">

      <t>
        The algorithm described in this section is designed for the
        common case of offline DNSSEC signing.
        Slight deviations may be permitted or necessary in other
        situations, such as with unsigned zones or online DNSSEC signing.
        Implementations that deviate from the described algorithm are
        advised to ensure that it produces &RRNAME; RRs, signatures,
        and dential-of-existence records that are identical to the
        ones generated by this procedure.
      </t>

      <section title="Add &RRNAME; Placeholder" anchor="placeholder">
        <t>
          In preparation for calculating the zone digest(s), any existing &RRNAME; records
          (and covering RRSIGs)
          at the zone apex
          are first deleted.
        </t>
        <t>
          Prior to calculation of the digest, and prior to signing with
          DNSSEC, one or more placeholder &RRNAME; records are added to the
          zone apex.  This
          ensures that
          denial-of-existence (NSEC, NSEC3) records are created correctly
          if the zone is signed with DNSSEC.  If placeholders were not added prior to
          signing, the later addition of &RRNAME; records would also require updating the
          Type Bit Maps field of any apex NSEC/NSEC3 RRs, which then invalidates
          the calculated digest value.
        </t>
        <t>
          When multiple &RRNAME; RRs are published in the zone, e.g.,
          during an algorithm rollover, each MUST specify a unique Scheme
          and Hash Algorithm tuple.
        </t>
        <t>
          It is RECOMMENDED that the TTL of the &RRNAME; record match the TTL of the SOA.
          However, the TTL of the &RRNAME; record may be safely ignored during verification
          in all cases.
        </t>
        <t>
          In the placeholder record, the Serial field is
          set to the current SOA Serial.
          The Scheme field is set to the value for the chosen collation scheme.
          The Hash Algorithm field is set
          to the value for the chosen hash algorithm.
          Since apex &RRNAME; records are excluded from digest calculation,
          the value of the Digest field does not matter at this point
          in the process.
        </t>
      </section>
      <section title="Optionally Sign the Zone">
        <t>
          Following addition of placeholder records, the zone may be signed with DNSSEC.
          When the digest calculation is complete, and the &RRNAME; record is updated,
          the signature(s) for the &RRNAME; RRSet MUST be recalculated and
          updated as well.
          Therefore, the signer is not required to calculate a signature over the placeholder record at
          this step in the process, but it is harmless to do so.
        </t>
      </section>

      <section title="Scheme-Specific Processing" anchor="collate-iterate">
        <t>
          Herein, only the SIMPLE collation scheme is defined.
          Additional schemes may be defined in future updates to this document.
        </t>

        <section title="The SIMPLE Scheme" anchor="scheme-simple">
          <t>
            For the SIMPLE scheme, the digest is calculated over the zone as
            a whole.  This means that a change to a single RR in the zone
            requires iterating over all RRs in the zone to recalculate
            the digest.  SIMPLE is a good choice for zones that are small
            and/or stable, but probably not good for zones that are
            large and/or dynamic.
          </t>

          <t>
            Calculation of a zone digest requires RRs
            to be processed in a consistent format and ordering.
            This specification uses DNSSEC’s canonical on-the-wire RR
            format (without name compression) and ordering as specified
            in Sections 6.1, 6.2, and 6.3 of <xref target="RFC4034"/> with the additional
            provision that
            RRSets having
            the same owner name MUST be numerically ordered, in ascending order, by their numeric RR TYPE.
          </t>

          <section title="SIMPLE Scheme Inclusion/Exclusion Rules" anchor="simple-inclusion-exclusion">
            <t>
              When iterating over records in the zone, the following inclusion/exclusion rules apply:
              <list style="symbols">
              <t>All records in the zone, including glue records, MUST be included, unless excluded by a subsequent rule.</t>
              <t>Occluded data (<xref target="RFC5936"/> Section 3.5) MUST be included.</t>
              <!-- V1: Duplicate RRs with equal owner, class, type, and RDATA MUST NOT be included. -->
              <!-- V2: Only one instance of duplicate RRs with equal owner, class, type and RDATA SHALL be included (<xref target="RFC4034"/> Section 6.3). -->
              <t>If there are duplicate RRs with equal owner, class, type, and RDATA, only one instance is included (<xref target="RFC4034"/> Section 6.3), and the duplicates MUST be omitted.</t>
              <t>The placeholder apex &RRNAME; RR(s) MUST NOT be included.</t>
              <t>If the zone is signed, DNSSEC RRs MUST be included, except:</t>
              <t>The RRSIG covering the apex &RRNAME; RRSet MUST NOT be included
                because the RRSIG will be updated after all digests have been calculated.</t>
              </list>
            </t>
          </section>

          <section title="SIMPLE Scheme Digest Calculation">
            <t>
              A zone digest using the SIMPLE scheme is calculated by concatenating all RRs in the zone,
              in the format and order described in <xref target="scheme-simple"/>
              subject to the inclusion/exclusion rules described in <xref target="simple-inclusion-exclusion"/>,
              and then applying the chosen hash algorithm:
            </t>
            <figure><artwork>
digest = hash( RR(1) | RR(2) | RR(3) | ... )

where "|" denotes concatenation.
            </artwork></figure>
          </section>

        </section>

      </section>

      <section title="Update &RRNAME; RR">
        <t>
          The calculated zone digest
          is inserted into the placeholder
          &RRNAME; RR.
          Repeat for each digest if multiple
          digests are to be published.
        </t>
        <t>
          If the zone is signed with DNSSEC, the RRSIG record(s) covering the &RRNAME;
          RRSet MUST then be added or updated.  Because the &RRNAME; placeholder was added prior to signing,
          the zone will already have the appropriate denial-of-existence (NSEC, NSEC3) records.
        </t>
        <t>
          Some DNSSEC implementations (especially "online signing") might
          update the SOA serial number whenever
          a new signature is made.  To preserve the calculated digest,
          generation of a &RRNAME; signature MUST NOT also result in
          a change to the SOA serial number.  The &RRNAME; RR and the
          matching SOA MUST be published at the same time.
        </t>
      </section>

    </section>

    <section title="Verifying Zone Digest" anchor="verifying">
      <t>
        The recipient of a zone that has a &RRNAME; RR verifies the zone
        by calculating the digest as follows.
          If multiple &RRNAME; RRs are present in the zone, e.g.,
          during an algorithm rollover, a match using any one of the recipient's
          supported Schemes and Hash Algorithms is sufficient to verify the zone.
          The verifier MAY ignore a &RRNAME; RR if its Scheme and Hash Algorithm
          violates local policy.
      </t>
      <t>
        <list style="numbers">
          <t anchor="verify-check-dnssec">
            The verifier MUST first determine
            whether or not to expect DNSSEC records in the zone.
            This is done by examining locally configured trust
            anchors, and, if necessary, querying for (and validating) DS RRs in the
            anchors, or querying for (and validating) DS RRs in the
<!-- XXX Roman suggests changing "provably insecure" etc -->
            parent zone.  For zones that are provably insecure,
            or if DNSSEC validation is not performed,
            digest verification continues at step <xref target="verify-check-digest-count" format="counter"/> below.
          </t>
          <t anchor="verify-check-existence">
            For zones that are provably secure, the existence of
            the apex &RRNAME; record MUST be verified.  If the &RRNAME;
            record provably does not exist, digest verification
            cannot occur.  If the &RRNAME; record does provably
            exist, but is not found in the zone, digest verification
            MUST NOT be considered successful.
          </t>
          <t anchor="verify-dnssec-validate">
            For zones that are provably secure, the SOA and
            &RRNAME; RRSets MUST have valid signatures, chaining
            up to a trust anchor.  If DNSSEC validation of the SOA
            or &RRNAME; records fails, digest verification MUST NOT
            be considered successful.
          </t>
          <t anchor="verify-check-digest-count">
            When multiple &RRNAME; RRs are present, each MUST specify a unique Scheme and Hash Algorithm tuple.
            If the &RRNAME; RRSet contains more than one RR with the same Scheme and Hash Algorithm, digest verification
            for those &RRNAME; RRs
            MUST NOT be considered successful.
          </t>
          <t>
            Loop over all apex &RRNAME; RRs and perform the following steps:
            <list style="letters">
              <t anchor="verify-check-serials">
                The SOA Serial field MUST exactly match the &RRNAME;
                Serial field.  If the fields do not match, digest
                verification MUST NOT be considered successful with this &RRNAME; RR.
              </t>
              <t>
                The Scheme field MUST be checked.  If the
                verifier does not support the given scheme, verification MUST NOT be considered successful with this &RRNAME; RR and it
                SHOULD report that the RR's digest could not be verified
                due to an unsupported scheme.
              </t>
              <t>
                The Hash Algorithm field MUST be checked.  If the
                verifier does not support the given hash algorithm, verification MUST NOT be considered successful with this &RRNAME; RR and it
                SHOULD report that the RR's digest could not be verified
                due to an unsupported algorithm.
              </t>
              <t>
                The Digest field size MUST be checked.  If the size of the
                given Digest field is smaller than 12 octets, or if the size is not equal to the size expected for the
                corresponding Hash Algorithm,
                verification MUST NOT be considered successful with this &RRNAME; RR and
                the verifier SHOULD report that the RR's digest
                could not be verified due to an incorrect digest length.
              </t>
              <t>
                The zone digest is computed over the zone data as
                described in <xref target="collate-iterate"/>,
                using the Scheme and Hash Algorithm for the current &RRNAME; RR.
              </t>
              <t>
                The computed digest is compared to the received digest.
                If the two digest values match, verification is considered
                successful.  Otherwise, verification MUST NOT be
                considered successful for this &RRNAME; RR.
              </t>
            </list>
          </t>
        </list>
      </t>
      <t>
        [ Maybe remove all the "SHOULD report" above and just say this:]
      </t>
      <t>
        Each time zone verification is performed, the verifier SHOULD
        report the status as either successful or unsuccessful.
        When unsuccessful, the verifier SHOULD report the reason(s) that
        verification did not succeed.
      </t>
    </section>

    <section title="IANA Considerations" anchor="iana">
      <section title="&RRNAME; RRtype">
        <t>
          This document defines a new DNS RR type, &RRNAME;, whose
          value 63 has been allocated by IANA from the "Resource
          Record (RR) TYPEs" subregistry of the "Domain Name System
          (DNS) Parameters" registry:
        </t>
        <t>Type: &RRNAME;</t>
        <t>Value: 63</t>
        <t>Meaning: Message Digest Over Zone Data</t>
        <t>Reference: [this document]</t>
      </section>

      <section title="&RRNAME; Scheme">
        <t>
          IANA is requested to create a new
          registry
          on the "Domain Name System (DNS) Parameters" web page
          as follows:
        </t>
        <t>Registry Name: &RRNAME; Schemes</t>
        <t>Registration Procedure: Specification Required</t>
        <t>Reference: [this document]</t>
        <texttable anchor="scheme-table" title="&RRNAME; Scheme Registry">
        <ttcol align="left">Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">Mnemonic</ttcol>
        <ttcol align="left">Reference</ttcol>

        <c>0</c>
        <c>Reserved</c>
        <c></c>
        <c></c>

        <c>1</c>
        <c>Simple &RRNAME; collation</c>
        <c>SIMPLE</c>
        <c>[this document]</c>

        <c>2-239</c>
        <c>Unassigned</c>
        <c></c>
        <c></c>

        <c>240-254</c>
        <c>Private Use</c>
        <c>N/A</c>
        <c>[this document]</c>

        <c>255</c>
        <c>Reserved</c>
        <c></c>
        <c></c>

        </texttable>
      </section>

      <section title="&RRNAME; Hash Algorithm" anchor="hash-alg-registry">
        <t>
          IANA is requested to create a new
          registry
          on the "Domain Name System (DNS) Parameters" web page
          as follows:
        </t>
        <t>Registry Name: &RRNAME; Hash Algorithms</t>
        <t>Registration Procedure: Specification Required</t>
        <t>Reference: [this document]</t>
        <texttable anchor="digest-type-table" title="&RRNAME; Hash Algorithm Registry">
        <ttcol align="left">Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">Mnemonic</ttcol>
        <ttcol align="left">Reference</ttcol>

        <c>0</c>
        <c>Reserved</c>
        <c></c>
        <c></c>

        <c>1</c>
        <c>SHA-384</c>
        <c>SHA384</c>
        <c>[this document]</c>

        <c>2</c>
        <c>SHA-512</c>
        <c>SHA512</c>
        <c>[this document]</c>

        <c>3-239</c>
        <c>Unassigned</c>
        <c></c>
        <c></c>

        <c>240-254</c>
        <c>Private Use</c>
        <c>N/A</c>
        <c>[his document]</c>

        <c>255</c>
        <c>Reserved</c>
        <c></c>
        <c></c>

        </texttable>
      </section>

    </section>

    <section title="Security Considerations" anchor="security">
      <section title="Using Zone Digest Without DNSSEC">
        <t>
          Users of &RRNAME; with unsigned zones are advised that
          it provides no real protection against attacks.
          While zone digests can be used in the absence of
          DNSSEC, this only provides protection against accidental
          zone corruption, such as transmission errors and truncation. When used in this
          manner, it effectively serves only as a checksum.
          For zones not signed with DNSSEC, an attacker
          can make any zone modifications appear to be valid
          by recomputing Digest field of a &RRNAME; RR.
        </t>
      </section>
      <section title="Attacks Against the Zone Digest">
        <t>
          An attacker, whose goal is to modify zone content before it is used
          by the victim, may consider a number of different approaches.
        </t>
        <t>
          The attacker might perform a downgrade attack to an unsigned
          zone.  This is why <xref target="verifying"/> talks about
          determining whether or not to expect DNSSEC
          signatures for the zone in step <xref target="verify-check-dnssec" format="counter"/>.
        </t>
        <t>
          The attacker might perform a downgrade attack by removing
          one or more &RRNAME; records.  Such a removal is detectable only with DNSSEC
          validation and is why <xref target="verifying"/>
          talks about checking denial-of-existence
          proofs in step <xref target="verify-check-existence" format="counter"/>
          and signature validation in step <xref target="verify-dnssec-validate" format="counter"/>.
        </t>
        <t>
          The attacker might alter the Scheme, Hash Algorithm, or Digest fields
          of the &RRNAME; record.  Such modifications are detectable
          only with DNSSEC validation.
        </t>
        <t>
          As stated in <xref target="RFC7696"/>, cryptographic algorithms
          age and become weaker as cryptanalysis techniques and computing
          resources improve with time.
          Implementors and publishers of zone digests should anticipate
          the need for algorithm agility on long timescales.
        </t>
      </section>
      <section title="Use of Multiple &RRNAME; Hash Algorithms">
        <t>
          When a zone publishes multiple &RRNAME; RRs, the overall security is
          only as good as the weakest hash algorithm in use.  For this reason, 
          <xref target="rrtype"/> recommends only publishing multiple &RRNAME; RRs
          when transitioning to a new scheme or hash algorithm.  Once the transition
          is complete, the old scheme or hash algorithm should be removed from
          the &RRNAME; RRSet.
        </t>
      </section>
      <section title="DNSSEC Timing Considerations">
        <t>
          As with all DNSSEC signatures, the ability to perform signature
          validation of a &RRNAME; record is limited in time.
          If the DS record(s) or trust anchors for the zone to be verified
          are no longer available, the recipient cannot validate
          the &RRNAME; RRSet.
          This could happen even if the &RRNAME; signature is still current
          (not expired), since the zone's DS record(s)
          may have been withdrawn following a Key Signing Key (KSK) rollover.
        </t>
        <t>
          For zones where it may be important to validate a &RRNAME;
          RRSet through its entire signature validity period, the zone
          operator should ensure that KSK rollover timing takes this
          into consideration.
        </t>
      </section>
      <section title="Attacks Utilizing &RRNAME; Queries">
        <t>
          Nothing in this specification prevents clients from making,
          and servers from responding to, &RRNAME; queries.
          Servers SHOULD NOT calculate zone digests dynamically (for
          each query) as this can be used as a CPU resource exhaustion
          attack.
        </t>
        <t>
          &RRNAME; responses could be used in
          a distributed denial-of-service amplification attack.
          The &RRNAME; RR is moderately sized, much like the DS RR.
          <!-- SHA384 SIMPLE for . is 65 bytes -->
          <!-- SHA512 SIMPLE for example.com is 93 bytes -->
          A single &RRNAME; RR contributes approximately 65 to 95
          octets to a DNS response, for digest
          types defined herein.  Other RR types, such as DNSKEY, can result in larger
          amplification effects.
        </t>
      </section>
      <section title="Resilience and Fragility">
        <t>
          &RRNAME; is used to detect incomplete or corrupted
          zone data prior to its use, thereby increasing resilience by not using corrupt data,
          but also introduces some denial-of-service fragility
          by making good data in a zone unavailable if some other data is missing or corrupt.
          Publishers and consumers of zones containing &RRNAME;
          records should be aware of these tradeoffs.
          While the intention is to secure the zone data,
          misconfigurations or implementation bugs are generally
          indistinguishable from intentional tampering, and could lead
          to service failures when verification is performed automatically.
        </t>
        <t>
          Zone publishers may want to deploy &RRNAME; gradually, perhaps
          by utilizing one of the private use hash algorithm code points listed
          in <xref target="hash-alg-registry"/>.  Similarly, recipients
          may want to initially configure verification failures only as
          a warning, and later as an error after gaining experience and
          confidence with the feature.
        </t>
      </section>
    </section>

    <section title="Performance Considerations" anchor="performance">
      <t>
        This section is provided to make zone publishers aware of the
        performance requirements and implications of including &RRNAME;
        RRs in a zone.
      </t>
      <section title="SIMPLE SHA384">
        <t>
          As mentioned previously, the SIMPLE scheme may be
          impractical for use in zones that are either large or
          highly dynamic.
          Zone publishers should carefully consider the use of &RRNAME;
          in such zones, since it might cause consumers of zone data
          (e.g., secondary name servers) to expend resources on digest
          calculation.
          For such use cases, it is recommended that &RRNAME;
          only be used when digest calculation time is significantly
          less than propagation times and update intervals.
        </t>
        <t>
          The authors' implementation (<xref
          target="authors-implementation"/>) includes an option to record
          and report CPU usage of its operation.
          The software was used to generate digests for more than 800
          TLD zones available from <xref target="CZDS"/>.
          The table below summarizes the results for the SIMPLE scheme and SHA384 hash algorithm
          grouped by zone size.
          The Rate column is the mean amount of time per RR to calculate the digest,
          running on commodity hardware in early 2020.
        </t>
        <texttable>
          <ttcol align="right">Zone Size (RRs)</ttcol>
          <ttcol align="right">Rate (msec/RR)</ttcol>
          <c>10 - 99</c>  <c>0.00683</c>
          <c>100 - 999</c>  <c>0.00551</c>
          <c>1000 - 9999</c>  <c>0.00505</c>
          <c>10000 - 99999</c>  <c>0.00602</c>
          <c>100000 - 999999</c>  <c>0.00845</c>
          <c>1000000 - 9999999</c>  <c>0.0108</c>
          <c>10000000 - 99999999</c>  <c>0.0148</c>
        </texttable>
        <t>
          For example, based on the above table, it takes approximately
          0.13 seconds to calculate a SIMPLE SHA384 digest for a zone with
          22,000 RRs, and about 2.5 seconds for a zone with 300,000 RRs.
        </t>
        <t>
          These benchmarks attempt to emulate a worst-case scenario and
          take into account the time required to canonicalize the zone
          for processing.
          Each of the 800+ zones were measured three times, and then
          averaged, with a different random sorting of the input data
          prior to each measurement.
        </t>
      </section>
    </section>

    <section title="Privacy Considerations" anchor="privacy">
      <t>This specification has no impact on user privacy.</t>
    </section>

    <section title="Acknowledgments" anchor="acknowledgments">
      <t>
        The authors wish to thank David Blacka, Scott Hollenbeck, and Rick Wilhelm
        for providing feedback on early drafts of this document.  Additionally, they
	      thank Joe Abley,  Mark Andrews,  Ralph Dolmans,  Donald Eastlake,
        Richard Gibson,  Olafur Gudmundsson,  Bob Harold,  Paul Hoffman,
        Evan Hunt,  Shumon Huque,  Tatuya Jinmei,  Mike St. Johns,
        Burt Kaliski,  Shane Kerr,  Matt Larson,  Barry Leiba,  John Levine,
        Ed Lewis,  Matt Pounsett,  Mukund Sivaraman,  Petr Spacek,
        Ondrej Sury,  Willem Toorop,  Florian Weimer,  Tim Wicinski,
        Wouter Wijngaards,  Paul Wouters, and other members of the
        DNSOP working group for their input.
      </t>
    </section>

    <section anchor="Changes" title="Change Log">
      <t>RFC Editor: Please remove this section before publication.</t>
      <t>This section lists substantial changes to the document as it is being worked on.</t>
      <t>From -00 to -01:
      <list style="symbols">
        <t>Removed requirement to sort by RR CLASS.</t>
        <t>Added Kumari and Hardaker as coauthors.</t>
        <t>Added Change Log section.</t>
        <t>Minor clarifications and grammatical edits.</t>
      </list></t>
      <t>From -01 to -02:
      <list style="symbols">
        <t>Emphasize desire for data security over channel security.</t>
        <t>Expanded motivation into its own subsection.</t>
        <t>Removed discussion topic whether or not to include serial in &RRNAME;.</t>
        <t>Clarified that a zone's NS records always sort before the SOA record.</t>
        <t>Clarified that all records in the zone must are digested, except as specified in
        the exclusion rules.</t>
        <t>Added for discussion out-of-zone and occluded records.</t>
        <t>Clarified that update of &RRNAME; signature must not cause a serial number change.</t>
        <t>Added persons to acknowledgments.</t>
      </list></t>
      <t>From -02 to -03:
      <list style="symbols">
        <t>Added recommendation to set &RRNAME; TTL to SOA TTL.</t>
        <t>Clarified that digest input uses uncompressed names.</t>
        <t>Updated Implementations section.</t>
        <t>Changed intended status from Standards Track to Experimental and added Scope of Experiment section.</t>
        <t>Updated Motivation, Introduction, and Design Overview sections in response to working group discussion.</t>
        <t>Gave &RRNAME; digest types their own status, separate from DS digest types.  Request IANA to create a registry.</t>
        <t>Added Reserved field for future work supporting dynamic updates.</t>
        <t>Be more rigorous about having just ONE &RRNAME; record in the zone.</t>
        <t>Expanded use cases.</t>
      </list></t>
      <t>From -03 to -04:
      <list style="symbols">
       <t>Added an appendix with example zones and digests.</t>
       <t>Clarified that only apex &RRNAME; RRs shall be processed.</t>
      </list></t>
      <t>From -04 to -05:
      <list style="symbols">
       <t>Made SHA384 the only supported &RRNAME; digest type.</t>
       <t>Disassociated &RRNAME; digest types from DS digest types.</t>
       <t>Updates to Introduction based on list feedback.</t>
       <t>Changed "zone file" to "zone" everywhere.</t>
       <t>Restored text about why &RRNAME; has a Serial field.</t>
       <t>Clarified ordering of RRSets having same owner to be numerically ascending.</t>
       <t>Clarified that all duplicate RRs (not just SOA) must be suppressed in digest calculation.</t>
       <t>Clarified that the Reserved field must be set to zero and checked for zero in verification.</t>
       <t>Clarified that occluded data must be included.</t>
       <t>Clarified procedure for verification, using temporary location for received digest.</t>
       <t>Explained why Reserved field is 8-bits.</t>
       <t>IANA Considerations section now more specific.</t>
       <t>Added complex zone to examples.</t>
       <t></t>
      </list></t>
      <t>From -05 to -06:
      <list style="symbols">
       <t>RR type code 63 was assigned to &RRNAME; by IANA.</t>
      </list></t>
      <t>From -06 to -07:
      <list style="symbols">
       <t>Fixed mistakes in &RRNAME; examples.</t>
       <t>Added private use Digest Type values 240-254.</t>
       <t>Clarified that Digest field must not be empty.</t>
      </list></t>
      <t>From -07 to draft-ietf-dnsop-dns-zone-digest-00:
      <list style="symbols">
        <t>Adopted by dnsop.</t>
        <t>Clarified further that non-apex &RRNAME; RRs have no meaning.</t>
        <t>Changed "provably [un]signed" to "provably [in]secure".</t>
        <t>Allow multiple &RRNAME; RRs to support algorithm agility/rollovers.</t>
        <t>Describe verification when there are multiple &RRNAME; RRs.</t>
      </list></t>
      <t>From -00 to -01:
      <list style="symbols">
        <t>Simplified requirements around verifying multiple digests.  Any one match is sufficient.</t>
        <t>Updated implementation notes.</t>
        <t>Both implementations produce expected results on examples given in this document.</t>
      </list></t>
      <t>From -01 to -02:
      <list style="symbols">
        <t>Changed the name of the Reserved field to Parameter.</t>
        <t>Changed the name of Digest Type 1 from SHA384 to SHA384-STABLE.</t>
        <t>The meaning of the Parameter field now depends on Digest Type.</t>
        <t>No longer require Parameter field to be zero in verification.</t>
        <t>Updated a rule from earlier versions that said multiple &RRNAME; RRs were not allowed.</t>
      </list></t>
      <t>From -02 to -03:
      <list style="symbols">
        <t>Changed the name of Digest Type 1 from SHA384-STABLE to SHA384-SIMPLE.</t>
        <t>Changed document status from Experimental to Standards Track.</t>
        <t>Removed Scope of Experimentation section.</t>
      </list></t>
      <t>From -03 to -04:
      <list style="symbols">
        <t>Addressing WGLC feedback.</t>
        <t>Changed from "Digest Type + Paramter" to "Scheme + Hash Algorithm".  This should make it more obvious how &RRNAME; can be expanded in the future with new schemes and hash algorithms, while sacrificing some of the flexibility that the Parameter was intended to provide.</t>
        <t>Note: old RDATA fields: Serial, Digest Type, Parameter, Digest.</t>
        <t>Note: new RDATA fields: Serial, Scheme, Hash Algorithm, Digest.</t>
        <t>Add new IANA requirement for a Scheme registry.</t>
        <t>Rearranged some sections and separated scheme-specific aspects from general aspects of digest calculation.</t>
        <t>When discussing multiple &RRNAME; RRs, allow for Scheme, as well as Hash Algorithm, transition.</t>
        <t>Added Performance Considerations section with some benchmarks.</t>
        <t>Further clarifications about non-apex &RRNAME; RRs.</t>
        <t>Clarified inclusion rule for duplicate RRs.</t>
        <t>Removed or lowercased some inappropriately used RFC 2119 key words.</t>
        <t>Clarified that all &RRNAME; RRs, even for unsupported hash algorithms, must be zeroized during digest calculation.</t>
        <t>Added Resilience and Fragility to security considerations.</t>
        <t>Updated examples since changes in this version result in different hash values.</t>
      </list></t>
      <t>From -04 to -05:
      <list style="symbols">
        <t>Clarifications about non-apex and multiple &RRNAME; RRs.</t>
        <t>Clarifications about benchmark results.</t>
        <t>Don't compute &RRNAME; on-the-fly.</t>
        <t>Specification Required for updates to &RRNAME; protocol registries.</t>
        <t>Other rewording based on WGLC feedback.</t>
        <t>Updated RFC numbers for some references.</t>
        <t>Use documentation IP addresses instead of loopback.</t>
        <t>Updated examples in the appendix.</t>
      </list></t>
      <t>From -05 to -06:
      <list style="symbols">
        <t>Per WG suggestion, no longer include any apex &RRNAME; record in digest calculation.</t>
        <t>Updated examples in the appendix.</t>
        <t>Clarified verification procedure by describing a loop over all &RRNAME; RRs.</t>
      </list></t>
      <t>From -06 to -07:
      <list style="symbols">
        <t>Added NIC Chile Labs implementation.</t>
      </list></t>
      <t>From -07 to -08:
      <list style="symbols">
        <t>Update an author's affiliation.</t>
        <t>Clarified why placeholder RRs are still important (for NSEC/NSEC3).</t>
        <t>Moved subsection ("Order of RRSets Having the Same Owner Name") with single sentence paragraph up into parent section.</t>
      </list></t>
      <t>From -08 to -09:
      <list style="symbols">
        <t>Moved format, ordering, inclusion/exclusion into a sub section specific to the SIMPLE scheme.</t>
        <t>Further clarified rules about multiple &RRNAME; RRs (AD comments).</t>
        <t>Reworded rules about processing of duplicate zone RRs (AD comments).</t>
        <t>Removed sentence about optional zeroing of digest prior to calculation (AD comments).</t>
        <t>Other minor changes (AD comments).</t>
      </list></t>
      <t>From -09 to -10:
      <list style="symbols">
        <t>Add clarification and reference to on-disk modification / corruption of zone files.</t>
        <t>Added concerns that timing of KSK rollovers could affect validation of &RRNAME; record.</t>
        <t>Addressed SECDIR review and accepted most proposed edits.</t>
        <t>From SECDIR review, require minimum digest length of 12 octets.</t>
        <t>From SECDIR review, add SHA512 has hash algorithm 2.</t>
        <t>From SECDIR review, say that &RRNAME; RRs MAY be ignored by local policy.</t>
        <t>Moved Implementation Status to an appendix with the intention to retain it in RFC.</t>
        <t>In registry tables, changed Status column to Implementation Requirement.</t>
      </list></t>
      <t>From -10 to -11:
      <list style="symbols">
        <t>Fixed people's names in the acknowledgments section (blush)</t>
        <t>Say "has not been modified between origination and retrieval."</t>
        <t>Say that &RRNAME; TTL doesn't matter during verification.</t>
        <t>Further clarification that the SHA-384 and SHA-512 hashes are not truncated.  Future algs might be truncated, but never below 96 bits.</t>
      </list></t>
      <t>From -11 to -12:
      <list style="symbols">
        <t>SECDIR review: make "recommended" all caps.</t>
        <t>SECDIR review: tweak explanation of why &RRNAME; RR has copy of SOA serial.</t>
        <t>SECDIR review: be even more clear about apex &RRNAME; RRs vs non-apex.</t>
        <t>SECDIR review: Forgot to delete sentence about IANA policy for adding new hash algorithms.</t>
        <t>SECDIR review: Spell out Key Signing Key first time.</t>
        <t>SECDIR review: say "private use hash algorithm code points."</t>
        <t>SECDIR review: Update estimates of &RRNAME; RR size.</t>
      </list></t>
      <t>From -12 to -13:
      <list style="symbols">
        <t>Added reference to draft-ietf-dprive-xfr-over-tls.</t>
        <t>Dropped Implementation Requirement from registry tables.</t>
        <t>Added Use of Multiple ZONEMD Hash Algorithms to Security Considerations.</t>
        <t>Added Using Zone Digest Without DNSSEC to Security Considerations.</t>
        <t>Added notes about the need for algorithm agility due to crypto algorithm aging.</t>
        <t>Further clarified that only with DNSSEC can &RRNAME; guarantee integrity and authenticity.</t>
        <t>For unsigned zones, &RRNAME; serves only as a checksum.</t>
        <t>Calculation algorithm is designed for common case of offline signing.  Deviations may be allowed as long as the end result is the same.</t>
        <t>Numerous small edits and clarifications from IESG reviewer comments.</t>
      </list></t>
      <t>From -13 to -14:
      <list style="symbols">
        <t></t>
      </list></t>
    </section>

  </middle>
  <back>

    <references title="Normative References">
    &RFC2119;
    &RFC1034;
    &RFC1035;
    &RFC4034;
    &RFC6234;
    &RFC8174;
    </references>

    <references title="Informative References">
    &RFC1995;
    &RFC2065;
    &RFC2136;
    &RFC2535;
    &RFC2845;
    &RFC2931;
    &RFC3258;
    &RFC4880;
    &RFC5155;
    &RFC5751;
    &RFC5936;
    &RFC7696;
    &RFC8126;
    &RFC8484;
    &RFC8499;
    &RFC8806;
    &RFC8901;
    &I-D.ietf-dprive-xfr-over-tls;

     <reference anchor="InterNIC" target="ftp://ftp.internic.net/domain/">
        <front>
          <title>InterNIC FTP site</title>
          <author>
            <organization>ICANN</organization>
          </author>
          <date year="2018" month="May" day="31"/>
        </front>
     </reference>

     <reference anchor="RootServers" target="https://www.root-servers.org/">
        <front>
          <title>Root Server Technical Operations</title>
          <author>
            <organization>Root Server Operators</organization>
          </author>
          <date year="2018" month="July" day="2"/>
        </front>
     </reference>

     <reference anchor="ldns-zone-digest" target="https://github.com/verisign/ldns-zone-digest">
        <front>
          <title>Implementation of Message Digests for DNS Zones using the ldns library</title>
          <author>
            <organization>Verisign</organization>
          </author>
          <date year="2018" month="July" day="20"/>
        </front>
     </reference>

     <reference anchor="ZoneDigestHackathon" target="https://github.com/shane-kerr/ZoneDigestHackathon">
        <front>
          <title>Prototype implementation of &RRNAME; for the IETF 102 hackathon in Python</title>
          <author initials="S." surname="Kerr" fullname="Shane Kerr">
          </author>
          <date year="2018" month="July" day="14"/>
        </front>
     </reference>

     <reference anchor="DnsTools" target="https://github.com/niclabs/dns-tools">
        <front>
          <title>DNS tools for zone signature (file, pkcs11-hsm)
      and validation, and zone digest (ZONEMD)</title>
          <author>
            <organization>NIC Chile Labs</organization>
          </author>
          <date year="2020" month="April"/>
        </front>
     </reference>

     <reference anchor="CZDS" target="https://czds.icann.org/">
        <front>
          <title>Centralized Zone Data Service</title>
          <author>
            <organization>Internet Corporation for Assigned Names and Numbers</organization>
          </author>
          <date year="2018" month="October" day="5"/>
        </front>
     </reference>

     <reference anchor="RPZ" target="https://en.wikipedia.org/w/index.php?title=Response_policy_zone&amp;oldid=960043728">
        <front>
          <title>Response policy zone</title>
          <author>
            <organization>Wikipedia</organization>
          </author>
          <date year="2020" month="May" day="31"/>
        </front>
     </reference>

     <reference anchor="disk-full-failure" target="https://web.archive.org/web/20100618032705/https://www.denic.de/en/denic-in-dialogue/news/2733.html">
        <front>
          <title>Background of the Partial Failure of the Name Service for .de Domains</title>
          <author>
            <organization>DENIC</organization>
          </author>
          <date year="2010" month="May" day="14"/>
        </front>
     </reference>

    </references>

    <section title="Example Zones With Digests">
      <t>
        This appendix contains example zones with accurate &RRNAME; records.  These can be used to
        verify an implementation of the zone digest protocol.
      </t>

      <section title="Simple EXAMPLE Zone">
        <t>
          Here, the EXAMPLE zone contains an SOA record, NS and glue records, and a &RRNAME; record.
        </t>
        <figure><artwork align="left"><![CDATA[
example.      86400   IN  SOA     ns1 admin 2018031900 (
                                  1800 900 604800 86400 )
              86400   IN  NS      ns1
              86400   IN  NS      ns2
              86400   IN  ZONEMD  2018031900 1 1 (
                                  c68090d90a7aed71
                                  6bc459f9340e3d7c
                                  1370d4d24b7e2fc3
                                  a1ddc0b9a87153b9
                                  a9713b3c9ae5cc27
                                  777f98b8e730044c )
ns1           3600    IN  A       203.0.113.63
ns2           3600    IN  AAAA    2001:db8::63
]]></artwork></figure>
      </section>

      <section title="Complex EXAMPLE Zone">
        <t>
          Here, the EXAMPLE zone contains duplicate RRs, and an occluded RR, and one out-of-zone RR.
        </t>
        <figure><artwork align="left"><![CDATA[
example.      86400   IN  SOA     ns1 admin 2018031900 (
                                  1800 900 604800 86400 )
              86400   IN  NS      ns1
              86400   IN  NS      ns2
              86400   IN  ZONEMD  2018031900 1 1 (
                                  31cefb03814f5062
                                  ad12fa951ba0ef5f
                                  8da6ae354a415767
                                  246f7dc932ceb1e7
                                  42a2108f529db6a3
                                  3a11c01493de358d )
ns1           3600    IN  A       203.0.113.63
ns2           3600    IN  AAAA    2001:db8::63
occluded.sub  7200    IN  TXT     "I'm occluded but must be digested"
sub           7200    IN  NS      ns1
duplicate     300     IN  TXT     "I must be digested just once"
duplicate     300     IN  TXT     "I must be digested just once"
foo.test.     555     IN  TXT     "out-of-zone data must be excluded"
non-apex      900     IN  ZONEMD  2018031900 1 1 (
                                  616c6c6f77656420
                                  6275742069676e6f
                                  7265642e20616c6c
                                  6f77656420627574
                                  2069676e6f726564
                                  2e20616c6c6f7765 )
]]></artwork></figure>
      </section>

      <section title="EXAMPLE Zone with multiple digests">
        <t>
          Here, the EXAMPLE zone contains multiple &RRNAME; records. It has both
          SHA384 and SHA512 digests using the SIMPLE scheme.  It also includes
          &RRNAME; records with Scheme and Hash Algorithm
          values in the private range (240-254).  These additional
          private-range digests are not verifiable.
        </t>
        <figure><artwork align="left"><![CDATA[
example.      86400   IN  SOA     ns1 admin 2018031900 (
                                  1800 900 604800 86400 )
example.      86400   IN  NS      ns1.example.
example.      86400   IN  NS      ns2.example.
example.      86400   IN  ZONEMD  2018031900 1 1 (
                                  62e6cf51b02e54b9
                                  b5f967d547ce4313
                                  6792901f9f88e637
                                  493daaf401c92c27
                                  9dd10f0edb1c56f8
                                  080211f8480ee306 )
example.      86400   IN  ZONEMD  2018031900 1 2 (
                                  08cfa1115c7b948c
                                  4163a901270395ea
                                  226a930cd2cbcf2f
                                  a9a5e6eb85f37c8a
                                  4e114d884e66f176
                                  eab121cb02db7d65
                                  2e0cc4827e7a3204
                                  f166b47e5613fd27 )
example.      86400   IN  ZONEMD  2018031900 1 240 (
                                  e2d523f654b9422a
                                  96c5a8f44607bbee )
example.      86400   IN  ZONEMD  2018031900 241 1 (
                                  e1846540e33a9e41
                                  89792d18d5d131f6
                                  05fc283e )
ns1.example.  3600    IN  A       203.0.113.63
ns2.example.  86400   IN  TXT     "This example has multiple digests"
ns2.example.  3600    IN  AAAA    2001:db8::63
]]></artwork></figure>
      </section>

      <section title="The URI.ARPA Zone">
        <t>
          The URI.ARPA zone retrieved 2018-10-21.
          Note this sample zone has (expired) signatures, but
          no signature for the &RRNAME; RR.
        </t>
        <figure><artwork align="left"><![CDATA[
; <<>> DiG 9.9.4 <<>> @lax.xfr.dns.icann.org uri.arpa axfr
; (2 servers found)
;; global options: +cmd
uri.arpa.         3600    IN      SOA     sns.dns.icann.org. (
    noc.dns.icann.org. 2018100702 10800 3600 1209600 3600 )
uri.arpa.         3600    IN      RRSIG   NSEC 8 2 3600 (
    20181028142623 20181007205525 47155 uri.arpa.
    eEC4w/oXLR1Epwgv4MBiDtSBsXhqrJVvJWUpbX8XpetAvD35bxwNCUTi
    /pAJVUXefegWeiriD2rkTgCBCMmn7YQIm3gdR+HjY/+o3BXNQnz97f+e
    HAE9EDDzoNVfL1PyV/2fde9tDeUuAGVVwmD399NGq9jWYMRpyri2kysr q/g= )
uri.arpa.         86400   IN      RRSIG   NS 8 2 86400 (
    20181028172020 20181007175821 47155 uri.arpa.
    ATyV2A2A8ZoggC+68u4GuP5MOUuR+2rr3eWOkEU55zAHld/7FiBxl4ln
    4byJYy7NudUwlMOEXajqFZE7DVl8PpcvrP3HeeGaVzKqaWj+aus0jbKF
    Bsvs2b1qDZemBfkz/IfAhUTJKnto0vSUicJKfItu0GjyYNJCz2CqEuGD Wxc= )
uri.arpa.         600     IN      RRSIG   MX 8 2 600 (
    20181028170556 20181007175821 47155 uri.arpa.
    e7/r3KXDohX1lyVavetFFObp8fB8aXT76HnN9KCQDxSnSghNM83UQV0t
    lTtD8JVeN1mCvcNFZpagwIgB7XhTtm6Beur/m5ES+4uSnVeS6Q66HBZK
    A3mR95IpevuVIZvvJ+GcCAQpBo6KRODYvJ/c/ZG6sfYWkZ7qg/Em5/+3 4UI= )
uri.arpa.         3600    IN      RRSIG   DNSKEY 8 2 3600 (
    20181028152832 20181007175821 15796 uri.arpa.
    nzpbnh0OqsgBBP8St28pLvPEQ3wZAUdEBuUwil+rtjjWlYYiqjPxZ286
    XF4Rq1usfV5x71jZz5IqswOaQgia91ylodFpLuXD6FTGs2nXGhNKkg1V
    chHgtwj70mXU72GefVgo8TxrFYzxuEFP5ZTP92t97FVWVVyyFd86sbbR
    6DZj3uA2wEvqBVLECgJLrMQ9Yy7MueJl3UA4h4E6zO2JY9Yp0W9woq0B
    dqkkwYTwzogyYffPmGAJG91RJ2h6cHtFjEZe2MnaY2glqniZ0WT9vXXd
    uFPm0KD9U77Ac+ZtctAF9tsZwSdAoL365E2L1usZbA+K0BnPPqGFJRJk
    5R0A1w== )
uri.arpa.         3600    IN      RRSIG   DNSKEY 8 2 3600 (
    20181028152832 20181007175821 55480 uri.arpa.
    lWtQV/5szQjkXmbcD47/+rOW8kJPksRFHlzxxmzt906+DBYyfrH6uq5X
    nHvrUlQO6M12uhqDeL+bDFVgqSpNy+42/OaZvaK3J8EzPZVBHPJykKMV
    63T83aAiJrAyHzOaEdmzLCpalqcEE2ImzlLHSafManRfJL8Yuv+JDZFj
    2WDWfEcUuwkmIZWX11zxp+DxwzyUlRl7x4+ok5iKZWIg5UnBAf6B8T75
    WnXzlhCw3F2pXI0a5LYg71L3Tp/xhjN6Yy9jGlIRf5BjB59X2zra3a2R
    PkI09SSnuEwHyF1mDaV5BmQrLGRnCjvwXA7ho2m+vv4SP5dUdXf+GTeA
    1HeBfw== )
uri.arpa.         3600    IN      RRSIG   SOA 8 2 3600 (
    20181029114753 20181008222815 47155 uri.arpa.
    qn8yBNoHDjGdT79U2Wu9IIahoS0YPOgYP8lG+qwPcrZ1BwGiHywuoUa2
    Mx6BWZlg+HDyaxj2iOmox+IIqoUHhXUbO7IUkJFlgrOKCgAR2twDHrXu
    9BUQHy9SoV16wYm3kBTEPyxW5FFm8vcdnKAF7sxSY8BbaYNpRIEjDx4A JUc= )
uri.arpa.         3600    IN      NSEC    ftp.uri.arpa. NS SOA (
    MX RRSIG NSEC DNSKEY )
uri.arpa.         86400   IN      NS      a.iana-servers.net.
uri.arpa.         86400   IN      NS      b.iana-servers.net.
uri.arpa.         86400   IN      NS      c.iana-servers.net.
uri.arpa.         86400   IN      NS      ns2.lacnic.net.
uri.arpa.         86400   IN      NS      sec3.apnic.net.
uri.arpa.         600     IN      MX      10 pechora.icann.org.
uri.arpa.         3600    IN      DNSKEY  256 3 8 (
    AwEAAcBi7tSart2J599zbYWspMNGN70IBWb4ziqyQYH9MTB/VCz6WyUK
    uXunwiJJbbQ3bcLqTLWEw134B6cTMHrZpjTAb5WAwg4XcWUu8mdcPTiL
    Bl6qVRlRD0WiFCTzuYUfkwsh1Rbr7rvrxSQhF5rh71zSpwV5jjjp65Wx
    SdJjlH0B )
uri.arpa.         3600    IN      DNSKEY  257 3 8 (
    AwEAAbNVv6ulgRdO31MtAehz7j3ALRjwZglWesnzvllQl/+hBRZr9QoY
    cO2I+DkO4Q1NKxox4DUIxj8SxPO3GwDuOFR9q2/CFi2O0mZjafbdYtWc
    3zSdBbi3q0cwCIx7GuG9eqlL+pg7mdk9dgdNZfHwB0LnqTD8ebLPsrO/
    Id7kBaiqYOfMlZnh2fp+2h6OOJZHtY0DK1UlssyB5PKsE0tVzo5s6zo9
    iXKe5u+8WTMaGDY49vG80JPAKE7ezMiH/NZcUMiE0PRZ8D3foq2dYuS5
    ym+vA83Z7v8A+Rwh4UGnjxKB8zmr803V0ASAmHz/gwH5Vb0nH+LObwFt
    l3wpbp+Wpm8= )
uri.arpa.         3600    IN      DNSKEY  257 3 8 (
    AwEAAbwnFTakCvaUKsXji4mgmxZUJi1IygbnGahbkmFEa0L16J+TchKR
    wcgzVfsxUGa2MmeA4hgkAooC3uy+tTmoMsgy8uq/JAj24DjiHzd46LfD
    FK/qMidVqFpYSHeq2Vv5ojkuIsx4oe4KsafGWYNOczKZgH5loGjN2aJG
    mrIm++XCphOskgCsQYl65MIzuXffzJyxlAuts+ecAIiVeqRaqQfr8LRU
    7wIsLxinXirprtQrbor+EtvlHp9qXE6ARTZDzf4jvsNpKvLFZtmxzFf3
    e/UJz5eHjpwDSiZL7xE8aE1o1nGfPtJx9ZnB3bapltaJ5wY+5XOCKgY0
    xmJVvNQlwdE= )
ftp.uri.arpa.     3600    IN      RRSIG   NSEC 8 3 3600 (
    20181028080856 20181007175821 47155 uri.arpa.
    HClGAqPxzkYkAT7Q/QNtQeB6YrkP6EPOef+9Qo5/2zngwAewXEAQiyF9
    jD1USJiroM11QqBS3v3aIdW/LXORs4Ez3hLcKNO1cKHsOuWAqzmE+BPP
    Arfh8N95jqh/q6vpaB9UtMkQ53tM2fYU1GszOLN0knxbHgDHAh2axMGH lqM= )
ftp.uri.arpa.     604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181028103644 20181007205525 47155 uri.arpa.
    WoLi+vZzkxaoLr2IGZnwkRvcDf6KxiWQd1WZP/U+AWnV+7MiqsWPZaf0
    9toRErerGoFOiOASNxZjBGJrRgjmavOM9U+LZSconP9zrNFd4dIu6kp5
    YxlQJ0uHOvx1ZHFCj6lAt1ACUIw04ZhMydTmi27c8MzEOMepvn7iH7r7 k7k= )
ftp.uri.arpa.     3600    IN      NSEC    http.uri.arpa. NAPTR (
    RRSIG NSEC )
ftp.uri.arpa.     604800  IN      NAPTR   0 0 "" "" (
    "!^ftp://([^:/?#]*).*$!\\1!i" . )
http.uri.arpa.    3600    IN      RRSIG   NSEC 8 3 3600 (
    20181029010647 20181007175821 47155 uri.arpa.
    U03NntQ73LHWpfLmUK8nMsqkwVsOGW2KdsyuHYAjqQSZvKbtmbv7HBmE
    H1+Ii3Z+wtfdMZBy5aC/6sHdx69BfZJs16xumycMlAy6325DKTQbIMN+
    ift9GrKBC7cgCd2msF/uzSrYxxg4MJQzBPvlkwXnY3b7eJSlIXisBIn7 3b8= )
http.uri.arpa.    604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181029011815 20181007205525 47155 uri.arpa.
    T7mRrdag+WSmG+n22mtBSQ/0Y3v+rdDnfQV90LN5Fq32N5K2iYFajF7F
    Tp56oOznytfcL4fHrqOE0wRc9NWOCCUec9C7Wa1gJQcllEvgoAM+L6f0
    RsEjWq6+9jvlLKMXQv0xQuMX17338uoD/xiAFQSnDbiQKxwWMqVAimv5 7Zs= )
http.uri.arpa.    3600    IN      NSEC    mailto.uri.arpa. NAPTR (
    RRSIG NSEC )
http.uri.arpa.    604800  IN      NAPTR   0 0 "" "" (
    "!^http://([^:/?#]*).*$!\\1!i" . )
mailto.uri.arpa.  3600    IN      RRSIG   NSEC 8 3 3600 (
    20181028110727 20181007175821 47155 uri.arpa.
    GvxzVL85rEukwGqtuLxek9ipwjBMfTOFIEyJ7afC8HxVMs6mfFa/nEM/
    IdFvvFg+lcYoJSQYuSAVYFl3xPbgrxVSLK125QutCFMdC/YjuZEnq5cl
    fQciMRD7R3+znZfm8d8u/snLV9w4D+lTBZrJJUBe1Efc8vum5vvV7819 ZoY= )
mailto.uri.arpa.  604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181028141825 20181007205525 47155 uri.arpa.
    MaADUgc3fc5v++M0YmqjGk3jBdfIA5RuP62hUSlPsFZO4k37erjIGCfF
    j+g84yc+QgbSde0PQHszl9fE/+SU5ZXiS9YdcbzSZxp2erFpZOTchrpg
    916T4vx6i59scodjb0l6bDyZ+mtIPrc1w6b4hUyOUTsDQoAJYxdfEuMg Vy4= )
mailto.uri.arpa.  3600    IN      NSEC    urn.uri.arpa. NAPTR (
    RRSIG NSEC )
mailto.uri.arpa.  604800  IN      NAPTR   0 0 "" "" (
    "!^mailto:(.*)@(.*)$!\\2!i" . )
urn.uri.arpa.     3600    IN      RRSIG   NSEC 8 3 3600 (
    20181028123243 20181007175821 47155 uri.arpa.
    Hgsw4Deops1O8uWyELGe6hpR/OEqCnTHvahlwiQkHhO5CSEQrbhmFAWe
    UOkmGAdTEYrSz+skLRQuITRMwzyFf4oUkZihGyhZyzHbcxWfuDc/Pd/9
    DSl56gdeBwy1evn5wBTms8yWQVkNtphbJH395gRqZuaJs3LD/qTyJ5Dp LvA= )
urn.uri.arpa.     604800  IN      RRSIG   NAPTR 8 3 604800 (
    20181029071816 20181007205525 47155 uri.arpa.
    ALIZD0vBqAQQt40GQ0Efaj8OCyE9xSRJRdyvyn/H/wZVXFRFKrQYrLAS
    D/K7q6CMTOxTRCu2J8yes63WJiaJEdnh+dscXzZkmOg4n5PsgZbkvUSW
    BiGtxvz5jNncM0xVbkjbtByrvJQAO1cU1mnlDKe1FmVB1uLpVdA9Ib4J hMU= )
urn.uri.arpa.     3600    IN      NSEC    uri.arpa. NAPTR RRSIG (
    NSEC )
urn.uri.arpa.     604800  IN      NAPTR   0 0 "" "" (
    "/urn:([^:]+)/\\1/i" . )
uri.arpa.         3600    IN      SOA     sns.dns.icann.org. (
    noc.dns.icann.org. 2018100702 10800 3600 1209600 3600 )
;; Query time: 66 msec
;; SERVER: 192.0.32.132#53(192.0.32.132)
;; WHEN: Sun Oct 21 20:39:28 UTC 2018
;; XFR size: 34 records (messages 1, bytes 3941)
uri.arpa.       3600    IN      ZONEMD  2018100702 1 1 (
    1291b78ddf7669b1a39d014d87626b709b55774c5d7d58fa
    dc556439889a10eaf6f11d615900a4f996bd46279514e473 )
]]></artwork></figure>
      </section>

      <section title="The ROOT-SERVERS.NET Zone">
        <t>
          The ROOT-SERVERS.NET zone retrieved 2018-10-21.
        </t>
        <figure><artwork align="left"><![CDATA[
root-servers.net.     3600000 IN  SOA     a.root-servers.net. (
    nstld.verisign-grs.com. 2018091100 14400 7200 1209600 3600000 )
root-servers.net.     3600000 IN  NS      a.root-servers.net.
root-servers.net.     3600000 IN  NS      b.root-servers.net.
root-servers.net.     3600000 IN  NS      c.root-servers.net.
root-servers.net.     3600000 IN  NS      d.root-servers.net.
root-servers.net.     3600000 IN  NS      e.root-servers.net.
root-servers.net.     3600000 IN  NS      f.root-servers.net.
root-servers.net.     3600000 IN  NS      g.root-servers.net.
root-servers.net.     3600000 IN  NS      h.root-servers.net.
root-servers.net.     3600000 IN  NS      i.root-servers.net.
root-servers.net.     3600000 IN  NS      j.root-servers.net.
root-servers.net.     3600000 IN  NS      k.root-servers.net.
root-servers.net.     3600000 IN  NS      l.root-servers.net.
root-servers.net.     3600000 IN  NS      m.root-servers.net.
a.root-servers.net.   3600000 IN  AAAA    2001:503:ba3e::2:30
a.root-servers.net.   3600000 IN  A       198.41.0.4
b.root-servers.net.   3600000 IN  MX      20 mail.isi.edu.
b.root-servers.net.   3600000 IN  AAAA    2001:500:200::b
b.root-servers.net.   3600000 IN  A       199.9.14.201
c.root-servers.net.   3600000 IN  AAAA    2001:500:2::c
c.root-servers.net.   3600000 IN  A       192.33.4.12
d.root-servers.net.   3600000 IN  AAAA    2001:500:2d::d
d.root-servers.net.   3600000 IN  A       199.7.91.13
e.root-servers.net.   3600000 IN  AAAA    2001:500:a8::e
e.root-servers.net.   3600000 IN  A       192.203.230.10
f.root-servers.net.   3600000 IN  AAAA    2001:500:2f::f
f.root-servers.net.   3600000 IN  A       192.5.5.241
g.root-servers.net.   3600000 IN  AAAA    2001:500:12::d0d
g.root-servers.net.   3600000 IN  A       192.112.36.4
h.root-servers.net.   3600000 IN  AAAA    2001:500:1::53
h.root-servers.net.   3600000 IN  A       198.97.190.53
i.root-servers.net.   3600000 IN  MX      10 mx.i.root-servers.org.
i.root-servers.net.   3600000 IN  AAAA    2001:7fe::53
i.root-servers.net.   3600000 IN  A       192.36.148.17
j.root-servers.net.   3600000 IN  AAAA    2001:503:c27::2:30
j.root-servers.net.   3600000 IN  A       192.58.128.30
k.root-servers.net.   3600000 IN  AAAA    2001:7fd::1
k.root-servers.net.   3600000 IN  A       193.0.14.129
l.root-servers.net.   3600000 IN  AAAA    2001:500:9f::42
l.root-servers.net.   3600000 IN  A       199.7.83.42
m.root-servers.net.   3600000 IN  AAAA    2001:dc3::35
m.root-servers.net.   3600000 IN  A       202.12.27.33
root-servers.net.     3600000 IN  SOA     a.root-servers.net. (
    nstld.verisign-grs.com. 2018091100 14400 7200 1209600 3600000 )
root-servers.net.     3600000 IN  ZONEMD  2018091100 1 1 (
    f1ca0ccd91bd5573d9f431c00ee0101b2545c97602be0a97
    8a3b11dbfc1c776d5b3e86ae3d973d6b5349ba7f04340f79 )
]]></artwork></figure>
      </section>
    </section>

    <section anchor="Implementation" title="Implementation Status">

      <t>
        RFC Editor: Please retain this section upon publication.
      </t>

      <t>
        This section records the status of known implementations of the
        protocol defined by this specification at the time of publication, and is inspired by the
        concepts described in RFC7942.
      </t>

      <t>
        Please note that the listing of any
        individual implementation here does not imply endorsement by the
        IETF.  Furthermore, no effort has been spent to verify the
        information presented here that was supplied by IETF contributors.
        This is not intended as, and must not be construed to be, a
        catalog of available implementations or their features.  Readers
        are advised to note that other implementations may exist.
      </t>

      <section title="Authors' Implementation" anchor="authors-implementation">
        <t>
          The authors have an open source implementation in
          C, using the ldns library <xref target="ldns-zone-digest"/>.  This implementation is able to
          perform the following functions:
          <list style="symbols">
          <t>Read an input zone and output a zone with the &RRNAME; placeholder.</t>
          <t>Compute zone digest over signed zone and update the &RRNAME; record.</t>
          <t>Re-compute DNSSEC signature over the &RRNAME; record.</t>
          <t>Verify the zone digest from an input zone.</t>
          </list>
          This implementation does not:
          <list style="symbols">
          <t>Perform DNSSEC validation of the &RRNAME; record during verification.</t>
          </list>
        </t>
      </section>
      <section title="Shane Kerr's Implementation">
        <t> Shane Kerr wrote an implementation of this specification during the IETF 102 hackathon
          <xref target="ZoneDigestHackathon"/>.  This implementation is in Python and is able to
          perform the following functions:
          <list style="symbols">
          <t>Read an input zone and output a zone with &RRNAME; record.</t>
          <t>Verify the zone digest from an input zone.</t>
          <t>Output the &RRNAME; record in its defined presentation format.</t>
          </list>
          This implementation does not:
          <list style="symbols">
          <t>Re-compute DNSSEC signature over the &RRNAME; record.</t>
          <t>Perform DNSSEC validation of the &RRNAME; record.</t>
          </list>
        </t>
      </section>
      <section title="NIC Chile Labs Implementation">
        <t>
          NIC Chile Labs wrote an implementation of this specification
          as part of "dns-tools" suite <xref target="DnsTools"/>,
          which besides digesting, can also sign and verify zones. This
          implementation is in Go and is able to perform the following
          functions:
          <list style="symbols">
          <t>Compute zone digest over signed zone and update the &RRNAME; record.</t>
          <t>Verify the zone digest from an input zone.</t>
          <t>Perform DNSSEC validation of the &RRNAME; record during verification.</t>
          <t>Re-compute DNSSEC signature over the &RRNAME; record.</t>
          </list>
        </t>
      </section>
    </section>

  </back>
</rfc>
